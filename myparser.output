Terminals unused in grammar

    DEL_DOT


Grammar

    0 $accept: input $end

    1 input: ε
    2      | declarations main_func
    3      | main_func

    4 declarations: declarations declaration
    5             | declaration

    6 declaration: variable_declaration
    7            | comp
    8            | const
    9            | function

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON

   12 basic_data_type: KW_INT
   13                | KW_SCALAR
   14                | KW_STR
   15                | KW_BOOLEAN

   16 types: basic_data_type
   17      | TK_IDENTIFIER

   18 identifier: TK_IDENTIFIER
   19           | TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | identifier DEL_COMMA TK_IDENTIFIER
   22           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

   24 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

   25 comp_body: comp_field
   26          | comp_field comp_body

   27 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON
   28           | comp_function

   29 comp_identifiers: HASH TK_IDENTIFIER
   30                 | HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   31                 | HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   32                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   33                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   37 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

   38 expr: identifier_expr
   39     | TK_STRING
   40     | KW_TRUE
   41     | KW_FALSE
   42     | DEL_LPAR expr DEL_RPAR
   43     | arithmetic_expr
   44     | relational_expr
   45     | logical_statements
   46     | function_statement

   47 arithmetic_expr: TK_INTEGER
   48                | TK_REAL
   49                | expr OP_POWER expr
   50                | expr OP_MULT expr
   51                | expr OP_DIV expr
   52                | expr OP_MOD expr
   53                | expr OP_PLUS expr
   54                | expr OP_MINUS expr
   55                | OP_PLUS expr
   56                | OP_MINUS expr

   57 identifier_expr: TK_IDENTIFIER
   58                | HASH TK_IDENTIFIER
   59                | TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET

   61 relational_expr: expr ROP_LESS expr
   62                | expr ROP_LESSEQUALS expr
   63                | expr ROP_GREATER expr
   64                | expr ROP_GREATEREQUALS expr
   65                | expr ROP_EQUALS expr
   66                | expr ROP_NOTEQUALS expr

   67 logical_statements: KW_NOT expr
   68                   | expr KW_AND expr
   69                   | expr KW_OR expr

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   72 params: ε
   73       | TK_IDENTIFIER DEL_COLON basic_data_type
   74       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   75       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

   77 func_body: ε
   78          | variable_declaration func_body
   79          | const func_body
   80          | statements func_body

   81 statements: if_statement
   82           | while_statement
   83           | assign_statement
   84           | for_statement
   85           | array_int_comprehension
   86           | array_comprehension
   87           | return_statement
   88           | break_statement
   89           | continue_statement
   90           | function_statement DEL_SMCOLON

   91 statement_body: ε
   92               | variable_declaration statement_body
   93               | const statement_body
   94               | statements statement_body

   95 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON

  101 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

  103 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  108 break_statement: KW_BREAK DEL_SMCOLON

  109 continue_statement: KW_CONTINUE DEL_SMCOLON

  110 return_statement: KW_RETURN DEL_SMCOLON
  111                 | KW_RETURN expr DEL_SMCOLON

  112 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

  114 function_arguments: expr
  115                   | expr DEL_COMMA function_arguments


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TK_IDENTIFIER <str> (258) 17 18 19 20 21 22 23 24 29 30 31 32 33 34 35 36 57 58 59 60 70 71 73 74 75 76 95 96 97 98 99 100 104 105 106 107 112 113
    TK_INTEGER <str> (259) 19 22 30 33 47 106 107
    TK_REAL <str> (260) 48
    TK_STRING <str> (261) 39
    KW_INT (262) 12
    KW_SCALAR (263) 13
    KW_STR (264) 14
    KW_BOOLEAN (265) 15
    KW_TRUE (266) 40
    KW_FALSE (267) 41
    KW_CONST (268) 37
    KW_IF (269) 101 102
    KW_ELSE (270) 102
    KW_ENDIF (271) 101 102
    KW_FOR (272) 104 105 106 107
    KW_IN (273) 104 105 107
    KW_ENDFOR (274) 104 105
    KW_WHILE (275) 103
    KW_ENDWHILE (276) 103
    KW_BREAK (277) 108
    KW_CONTINUE (278) 109
    KW_NOT (279) 67
    KW_AND (280) 68
    KW_OR (281) 69
    KW_DEF (282) 10 35 36 70 71
    KW_ENDDEF (283) 10 35 36 70 71
    KW_MAIN (284) 10
    KW_RETURN (285) 110 111
    KW_COMP (286) 24
    KW_ENDCOMP (287) 24
    KW_OF (288) 107
    OP_PLUS (289) 53 55
    OP_MINUS (290) 54 56
    OP_MULT (291) 50
    OP_DIV (292) 51
    OP_MOD (293) 52
    OP_POWER (294) 49
    ROP_EQUALS (295) 65
    ROP_NOTEQUALS (296) 66
    ROP_LESS (297) 61
    ROP_LESSEQUALS (298) 62
    ROP_GREATER (299) 63
    ROP_GREATEREQUALS (300) 64
    AOP_ASSIGN (301) 37 95
    AOP_PLUSASSIGN (302) 96
    AOP_MINASSIGN (303) 97
    AOP_MULASSIGN (304) 98
    AOP_DIVASSIGN (305) 99
    AOP_MODASSIGN (306) 100
    AOP_COLONASSIGN (307) 106 107
    AOP_ARROW (308) 36 71
    DEL_SMCOLON (309) 10 11 24 27 35 36 37 70 71 90 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
    DEL_LPAR (310) 10 35 36 42 70 71 101 102 103 112 113
    DEL_RPAR (311) 10 35 36 42 70 71 101 102 103 112 113
    DEL_COMMA (312) 21 22 23 32 33 34 74 76 115
    DEL_LBRACKET (313) 19 20 22 23 30 31 33 34 59 60 75 76 104 105 106 107
    DEL_RBRACKET (314) 19 20 22 23 30 31 33 34 59 60 75 76 104 105 106 107
    DEL_COLON (315) 10 11 24 27 35 36 37 70 71 73 74 75 76 101 102 103 104 105 106 107
    DEL_DOT (316)
    HASH (317) 29 30 31 32 33 34 58


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    input (64)
        on left: 1 2 3
        on right: 0
    declarations <str> (65)
        on left: 4 5
        on right: 2 4
    declaration <str> (66)
        on left: 6 7 8 9
        on right: 4 5
    main_func <str> (67)
        on left: 10
        on right: 2 3
    variable_declaration <str> (68)
        on left: 11
        on right: 6 78 92
    basic_data_type <str> (69)
        on left: 12 13 14 15
        on right: 16 37 71 73 74 75 76
    types <str> (70)
        on left: 16 17
        on right: 11 27 36 106 107
    identifier <str> (71)
        on left: 18 19 20 21 22 23
        on right: 11 21 22 23 37
    comp <str> (72)
        on left: 24
        on right: 7
    comp_body <str> (73)
        on left: 25 26
        on right: 24 26
    comp_field <str> (74)
        on left: 27 28
        on right: 25 26
    comp_identifiers <str> (75)
        on left: 29 30 31 32 33 34
        on right: 27 32 33 34
    comp_function <str> (76)
        on left: 35 36
        on right: 28
    const <str> (77)
        on left: 37
        on right: 8 79 93
    expr <str> (78)
        on left: 38 39 40 41 42 43 44 45 46
        on right: 37 42 49 50 51 52 53 54 55 56 61 62 63 64 65 66 67 68 69 95 96 97 98 99 100 101 102 103 104 105 106 107 111 114 115
    arithmetic_expr <str> (79)
        on left: 47 48 49 50 51 52 53 54 55 56
        on right: 43 60
    identifier_expr <str> (80)
        on left: 57 58 59 60
        on right: 38
    relational_expr <str> (81)
        on left: 61 62 63 64 65 66
        on right: 44
    logical_statements <str> (82)
        on left: 67 68 69
        on right: 45
    function <str> (83)
        on left: 70 71
        on right: 9
    params <str> (84)
        on left: 72 73 74 75 76
        on right: 35 36 70 71 74 76
    func_body <str> (85)
        on left: 77 78 79 80
        on right: 10 35 36 70 71 78 79 80
    statements <str> (86)
        on left: 81 82 83 84 85 86 87 88 89 90
        on right: 80 94 102
    statement_body <str> (87)
        on left: 91 92 93 94
        on right: 92 93 94 101 102 103 104 105
    assign_statement <str> (88)
        on left: 95 96 97 98 99 100
        on right: 83
    if_statement <str> (89)
        on left: 101 102
        on right: 81
    while_statement <str> (90)
        on left: 103
        on right: 82
    for_statement <str> (91)
        on left: 104 105
        on right: 84
    array_int_comprehension <str> (92)
        on left: 106
        on right: 85
    array_comprehension <str> (93)
        on left: 107
        on right: 86
    break_statement <str> (94)
        on left: 108
        on right: 88
    continue_statement <str> (95)
        on left: 109
        on right: 89
    return_statement <str> (96)
        on left: 110 111
        on right: 87
    function_statement <str> (97)
        on left: 112 113
        on right: 46 90
    function_arguments <str> (98)
        on left: 114 115
        on right: 113 115


State 0

    0 $accept: • input $end
    1 input: ε •  [$end]
    2      | • declarations main_func
    3      | • main_func
    4 declarations: • declarations declaration
    5             | • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   24 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   70 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    $default  reduce using rule 1 (input)

    input                 go to state 5
    declarations          go to state 6
    declaration           go to state 7
    main_func             go to state 8
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 1

   18 identifier: TK_IDENTIFIER •  [AOP_ASSIGN, DEL_COMMA, DEL_COLON]
   19           | TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 14

    $default  reduce using rule 18 (identifier)


State 2

   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: KW_CONST • identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1

    identifier  go to state 15


State 3

   10 main_func: KW_DEF • KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   70 function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 16
    KW_MAIN        shift, and go to state 17


State 4

   24 comp: KW_COMP • TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 18


State 5

    0 $accept: input • $end

    $end  shift, and go to state 19


State 6

    2 input: declarations • main_func
    4 declarations: declarations • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   24 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   70 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    declaration           go to state 20
    main_func             go to state 21
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 7

    5 declarations: declaration •

    $default  reduce using rule 5 (declarations)


State 8

    3 input: main_func •

    $default  reduce using rule 3 (input)


State 9

    6 declaration: variable_declaration •

    $default  reduce using rule 6 (declaration)


State 10

   11 variable_declaration: identifier • DEL_COLON types DEL_SMCOLON
   21 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   22           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    DEL_COMMA  shift, and go to state 22
    DEL_COLON  shift, and go to state 23


State 11

    7 declaration: comp •

    $default  reduce using rule 7 (declaration)


State 12

    8 declaration: const •

    $default  reduce using rule 8 (declaration)


State 13

    9 declaration: function •

    $default  reduce using rule 9 (declaration)


State 14

   19 identifier: TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET
   20           | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET

    TK_INTEGER    shift, and go to state 24
    DEL_RBRACKET  shift, and go to state 25


State 15

   21 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   22           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: KW_CONST identifier • AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    AOP_ASSIGN  shift, and go to state 26
    DEL_COMMA   shift, and go to state 22


State 16

   70 function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 27


State 17

   10 main_func: KW_DEF KW_MAIN • DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 28


State 18

   24 comp: KW_COMP TK_IDENTIFIER • DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    DEL_COLON  shift, and go to state 29


State 19

    0 $accept: input $end •

    $default  accept


State 20

    4 declarations: declarations declaration •

    $default  reduce using rule 4 (declarations)


State 21

    2 input: declarations main_func •

    $default  reduce using rule 2 (input)


State 22

   21 identifier: identifier DEL_COMMA • TK_IDENTIFIER
   22           | identifier DEL_COMMA • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | identifier DEL_COMMA • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 30


State 23

   11 variable_declaration: identifier DEL_COLON • types DEL_SMCOLON
   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 31
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 37


State 24

   19 identifier: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 38


State 25

   20 identifier: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 20 (identifier)


State 26

   37 const: KW_CONST identifier AOP_ASSIGN • expr DEL_COLON basic_data_type DEL_SMCOLON
   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 50
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 27

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72 params: ε •  [DEL_RPAR]
   73       | • TK_IDENTIFIER DEL_COLON basic_data_type
   74       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   75       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 56

    $default  reduce using rule 72 (params)

    params  go to state 57


State 28

   10 main_func: KW_DEF KW_MAIN DEL_LPAR • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 58


State 29

   24 comp: KW_COMP TK_IDENTIFIER DEL_COLON • comp_body KW_ENDCOMP DEL_SMCOLON
   25 comp_body: • comp_field
   26          | • comp_field comp_body
   27 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   28           | • comp_function
   29 comp_identifiers: • HASH TK_IDENTIFIER
   30                 | • HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   31                 | • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   32                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   33                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   35 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 59
    HASH    shift, and go to state 60

    comp_body         go to state 61
    comp_field        go to state 62
    comp_identifiers  go to state 63
    comp_function     go to state 64


State 30

   21 identifier: identifier DEL_COMMA TK_IDENTIFIER •  [AOP_ASSIGN, DEL_COMMA, DEL_COLON]
   22           | identifier DEL_COMMA TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | identifier DEL_COMMA TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 65

    $default  reduce using rule 21 (identifier)


State 31

   17 types: TK_IDENTIFIER •

    $default  reduce using rule 17 (types)


State 32

   12 basic_data_type: KW_INT •

    $default  reduce using rule 12 (basic_data_type)


State 33

   13 basic_data_type: KW_SCALAR •

    $default  reduce using rule 13 (basic_data_type)


State 34

   14 basic_data_type: KW_STR •

    $default  reduce using rule 14 (basic_data_type)


State 35

   15 basic_data_type: KW_BOOLEAN •

    $default  reduce using rule 15 (basic_data_type)


State 36

   16 types: basic_data_type •

    $default  reduce using rule 16 (types)


State 37

   11 variable_declaration: identifier DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 66


State 38

   19 identifier: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •

    $default  reduce using rule 19 (identifier)


State 39

   57 identifier_expr: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   59                | TK_IDENTIFIER • DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | TK_IDENTIFIER • DEL_LBRACKET arithmetic_expr DEL_RBRACKET
  112 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    DEL_LPAR      shift, and go to state 67
    DEL_LBRACKET  shift, and go to state 68

    $default  reduce using rule 57 (identifier_expr)


State 40

   47 arithmetic_expr: TK_INTEGER •

    $default  reduce using rule 47 (arithmetic_expr)


State 41

   48 arithmetic_expr: TK_REAL •

    $default  reduce using rule 48 (arithmetic_expr)


State 42

   39 expr: TK_STRING •

    $default  reduce using rule 39 (expr)


State 43

   40 expr: KW_TRUE •

    $default  reduce using rule 40 (expr)


State 44

   41 expr: KW_FALSE •

    $default  reduce using rule 41 (expr)


State 45

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   67                   | KW_NOT • expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 69
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 46

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   55                | OP_PLUS • expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 70
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 47

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   56                | OP_MINUS • expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 71
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 48

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   42     | DEL_LPAR • expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 72
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 49

   58 identifier_expr: HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 73


State 50

   37 const: KW_CONST identifier AOP_ASSIGN expr • DEL_COLON basic_data_type DEL_SMCOLON
   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_COLON          shift, and go to state 88


State 51

   43 expr: arithmetic_expr •

    $default  reduce using rule 43 (expr)


State 52

   38 expr: identifier_expr •

    $default  reduce using rule 38 (expr)


State 53

   44 expr: relational_expr •

    $default  reduce using rule 44 (expr)


State 54

   45 expr: logical_statements •

    $default  reduce using rule 45 (expr)


State 55

   46 expr: function_statement •

    $default  reduce using rule 46 (expr)


State 56

   73 params: TK_IDENTIFIER • DEL_COLON basic_data_type
   74       | TK_IDENTIFIER • DEL_COLON basic_data_type DEL_COMMA params
   75       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_LBRACKET  shift, and go to state 89
    DEL_COLON     shift, and go to state 90


State 57

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 91


State 58

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 92


State 59

   35 comp_function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 93


State 60

   29 comp_identifiers: HASH • TK_IDENTIFIER
   30                 | HASH • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   31                 | HASH • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 94


State 61

   24 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body • KW_ENDCOMP DEL_SMCOLON

    KW_ENDCOMP  shift, and go to state 95


State 62

   25 comp_body: • comp_field
   25          | comp_field •  [KW_ENDCOMP]
   26          | • comp_field comp_body
   26          | comp_field • comp_body
   27 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   28           | • comp_function
   29 comp_identifiers: • HASH TK_IDENTIFIER
   30                 | • HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   31                 | • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   32                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   33                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   35 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 59
    HASH    shift, and go to state 60

    $default  reduce using rule 25 (comp_body)

    comp_body         go to state 96
    comp_field        go to state 62
    comp_identifiers  go to state 63
    comp_function     go to state 64


State 63

   27 comp_field: comp_identifiers • DEL_COLON types DEL_SMCOLON
   32 comp_identifiers: comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER
   33                 | comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    DEL_COMMA  shift, and go to state 97
    DEL_COLON  shift, and go to state 98


State 64

   28 comp_field: comp_function •

    $default  reduce using rule 28 (comp_field)


State 65

   22 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET
   23           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET

    TK_INTEGER    shift, and go to state 99
    DEL_RBRACKET  shift, and go to state 100


State 66

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 11 (variable_declaration)


State 67

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  112                   | TK_IDENTIFIER DEL_LPAR • DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  113                   | TK_IDENTIFIER DEL_LPAR • function_arguments DEL_RPAR
  114 function_arguments: • expr
  115                   | • expr DEL_COMMA function_arguments

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    DEL_RPAR       shift, and go to state 101
    HASH           shift, and go to state 49

    expr                go to state 102
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55
    function_arguments  go to state 103


State 68

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   59                | TK_IDENTIFIER DEL_LBRACKET • TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   60                | TK_IDENTIFIER DEL_LBRACKET • arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 104
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 105
    arithmetic_expr     go to state 106
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 69

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   67 logical_statements: KW_NOT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   68                   | expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND  shift, and go to state 74
    KW_OR   shift, and go to state 75

    $default  reduce using rule 67 (logical_statements)

    Conflict between rule 67 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 67 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 67 and token OP_PLUS resolved as reduce (OP_PLUS < KW_NOT).
    Conflict between rule 67 and token OP_MINUS resolved as reduce (OP_MINUS < KW_NOT).
    Conflict between rule 67 and token OP_MULT resolved as reduce (OP_MULT < KW_NOT).
    Conflict between rule 67 and token OP_DIV resolved as reduce (OP_DIV < KW_NOT).
    Conflict between rule 67 and token OP_MOD resolved as reduce (OP_MOD < KW_NOT).
    Conflict between rule 67 and token OP_POWER resolved as reduce (OP_POWER < KW_NOT).
    Conflict between rule 67 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_NOT).
    Conflict between rule 67 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_NOT).
    Conflict between rule 67 and token ROP_LESS resolved as reduce (ROP_LESS < KW_NOT).
    Conflict between rule 67 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_NOT).
    Conflict between rule 67 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_NOT).
    Conflict between rule 67 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_NOT).


State 70

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   55                | OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 55 (arithmetic_expr)

    Conflict between rule 55 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 55 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 55 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 55 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 55 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 55 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 55 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 55 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 55 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 55 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 55 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 55 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 55 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 71

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   56                | OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 56 (arithmetic_expr)

    Conflict between rule 56 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 56 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 56 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 56 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 56 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 56 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 56 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 56 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 56 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 56 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 56 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 56 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 56 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 56 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 72

   42 expr: DEL_LPAR expr • DEL_RPAR
   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_RPAR           shift, and go to state 107


State 73

   58 identifier_expr: HASH TK_IDENTIFIER •

    $default  reduce using rule 58 (identifier_expr)


State 74

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   68                   | expr KW_AND • expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 108
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 75

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   69                   | expr KW_OR • expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 109
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 76

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   53                | expr OP_PLUS • expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 110
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 77

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   54                | expr OP_MINUS • expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 111
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 78

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   50                | expr OP_MULT • expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 112
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 79

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   51                | expr OP_DIV • expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 113
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 80

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   52                | expr OP_MOD • expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 114
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 81

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   49                | expr OP_POWER • expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 115
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 82

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   65                | expr ROP_EQUALS • expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 116
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 83

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   66                | expr ROP_NOTEQUALS • expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 117
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 84

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   61                | expr ROP_LESS • expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 118
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 85

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   62                | expr ROP_LESSEQUALS • expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 119
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 86

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   63                | expr ROP_GREATER • expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 120
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 87

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   64                | expr ROP_GREATEREQUALS • expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 121
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 88

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   37 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON • basic_data_type DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 122


State 89

   75 params: TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type
   76       | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_RBRACKET  shift, and go to state 123


State 90

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   73 params: TK_IDENTIFIER DEL_COLON • basic_data_type
   74       | TK_IDENTIFIER DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 124


State 91

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 125
    DEL_COLON  shift, and go to state 126


State 92

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 136
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 93

   35 comp_function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 148


State 94

   29 comp_identifiers: HASH TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   30                 | HASH TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   31                 | HASH TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 149

    $default  reduce using rule 29 (comp_identifiers)


State 95

   24 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 150


State 96

   26 comp_body: comp_field comp_body •

    $default  reduce using rule 26 (comp_body)


State 97

   32 comp_identifiers: comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER
   33                 | comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    HASH  shift, and go to state 151


State 98

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   27 comp_field: comp_identifiers DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 31
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 152


State 99

   22 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 153


State 100

   23 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 23 (identifier)


State 101

  112 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR •

    $default  reduce using rule 112 (function_statement)


State 102

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  114 function_arguments: expr •  [DEL_RPAR]
  115                   | expr • DEL_COMMA function_arguments

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_COMMA          shift, and go to state 154

    $default  reduce using rule 114 (function_arguments)


State 103

  113 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments • DEL_RPAR

    DEL_RPAR  shift, and go to state 155


State 104

   57 identifier_expr: TK_IDENTIFIER •  [KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS]
   59                | TK_IDENTIFIER • DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   59                | TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER • DEL_RBRACKET
   60                | TK_IDENTIFIER • DEL_LBRACKET arithmetic_expr DEL_RBRACKET
  112 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    DEL_LPAR      shift, and go to state 67
    DEL_LBRACKET  shift, and go to state 68
    DEL_RBRACKET  shift, and go to state 156

    $default  reduce using rule 57 (identifier_expr)


State 105

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87


State 106

   43 expr: arithmetic_expr •  [KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS]
   60 identifier_expr: TK_IDENTIFIER DEL_LBRACKET arithmetic_expr • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 157

    $default  reduce using rule 43 (expr)


State 107

   42 expr: DEL_LPAR expr DEL_RPAR •

    $default  reduce using rule 42 (expr)


State 108

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   68                   | expr KW_AND expr •  [KW_FOR, KW_AND, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   69                   | expr • KW_OR expr

    KW_OR  shift, and go to state 75

    $default  reduce using rule 68 (logical_statements)

    Conflict between rule 68 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 68 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 68 and token OP_PLUS resolved as reduce (OP_PLUS < KW_AND).
    Conflict between rule 68 and token OP_MINUS resolved as reduce (OP_MINUS < KW_AND).
    Conflict between rule 68 and token OP_MULT resolved as reduce (OP_MULT < KW_AND).
    Conflict between rule 68 and token OP_DIV resolved as reduce (OP_DIV < KW_AND).
    Conflict between rule 68 and token OP_MOD resolved as reduce (OP_MOD < KW_AND).
    Conflict between rule 68 and token OP_POWER resolved as reduce (OP_POWER < KW_AND).
    Conflict between rule 68 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_AND).
    Conflict between rule 68 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 68 and token ROP_LESS resolved as reduce (ROP_LESS < KW_AND).
    Conflict between rule 68 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 68 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_AND).
    Conflict between rule 68 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_AND).


State 109

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   69                   | expr KW_OR expr •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]

    $default  reduce using rule 69 (logical_statements)

    Conflict between rule 69 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 69 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 69 and token OP_PLUS resolved as reduce (OP_PLUS < KW_OR).
    Conflict between rule 69 and token OP_MINUS resolved as reduce (OP_MINUS < KW_OR).
    Conflict between rule 69 and token OP_MULT resolved as reduce (OP_MULT < KW_OR).
    Conflict between rule 69 and token OP_DIV resolved as reduce (OP_DIV < KW_OR).
    Conflict between rule 69 and token OP_MOD resolved as reduce (OP_MOD < KW_OR).
    Conflict between rule 69 and token OP_POWER resolved as reduce (OP_POWER < KW_OR).
    Conflict between rule 69 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_OR).
    Conflict between rule 69 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 69 and token ROP_LESS resolved as reduce (ROP_LESS < KW_OR).
    Conflict between rule 69 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 69 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_OR).
    Conflict between rule 69 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_OR).


State 110

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   53                | expr OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 53 (arithmetic_expr)

    Conflict between rule 53 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 53 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 53 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 53 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 53 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 53 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 53 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 53 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 53 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 53 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 53 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 53 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 53 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 53 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 111

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   54                | expr OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 54 (arithmetic_expr)

    Conflict between rule 54 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 54 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 54 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 54 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 54 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 54 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 54 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 54 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 54 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 54 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 54 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 54 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 54 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 54 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 112

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   50                | expr OP_MULT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 50 (arithmetic_expr)

    Conflict between rule 50 and token KW_AND resolved as shift (OP_MULT < KW_AND).
    Conflict between rule 50 and token KW_OR resolved as shift (OP_MULT < KW_OR).
    Conflict between rule 50 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 50 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 50 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 50 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 50 and token OP_MOD resolved as shift (OP_MULT < OP_MOD).
    Conflict between rule 50 and token OP_POWER resolved as shift (OP_MULT < OP_POWER).
    Conflict between rule 50 and token ROP_EQUALS resolved as shift (OP_MULT < ROP_EQUALS).
    Conflict between rule 50 and token ROP_NOTEQUALS resolved as shift (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 50 and token ROP_LESS resolved as shift (OP_MULT < ROP_LESS).
    Conflict between rule 50 and token ROP_LESSEQUALS resolved as shift (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 50 and token ROP_GREATER resolved as shift (OP_MULT < ROP_GREATER).
    Conflict between rule 50 and token ROP_GREATEREQUALS resolved as shift (OP_MULT < ROP_GREATEREQUALS).


State 113

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   51                | expr OP_DIV expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 51 (arithmetic_expr)

    Conflict between rule 51 and token KW_AND resolved as shift (OP_DIV < KW_AND).
    Conflict between rule 51 and token KW_OR resolved as shift (OP_DIV < KW_OR).
    Conflict between rule 51 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 51 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 51 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 51 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 51 and token OP_MOD resolved as shift (OP_DIV < OP_MOD).
    Conflict between rule 51 and token OP_POWER resolved as shift (OP_DIV < OP_POWER).
    Conflict between rule 51 and token ROP_EQUALS resolved as shift (OP_DIV < ROP_EQUALS).
    Conflict between rule 51 and token ROP_NOTEQUALS resolved as shift (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 51 and token ROP_LESS resolved as shift (OP_DIV < ROP_LESS).
    Conflict between rule 51 and token ROP_LESSEQUALS resolved as shift (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 51 and token ROP_GREATER resolved as shift (OP_DIV < ROP_GREATER).
    Conflict between rule 51 and token ROP_GREATEREQUALS resolved as shift (OP_DIV < ROP_GREATEREQUALS).


State 114

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   52                | expr OP_MOD expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 52 (arithmetic_expr)

    Conflict between rule 52 and token KW_AND resolved as shift (OP_MOD < KW_AND).
    Conflict between rule 52 and token KW_OR resolved as shift (OP_MOD < KW_OR).
    Conflict between rule 52 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 52 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 52 and token OP_MULT resolved as reduce (OP_MULT < OP_MOD).
    Conflict between rule 52 and token OP_DIV resolved as reduce (OP_DIV < OP_MOD).
    Conflict between rule 52 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 52 and token OP_POWER resolved as shift (OP_MOD < OP_POWER).
    Conflict between rule 52 and token ROP_EQUALS resolved as shift (OP_MOD < ROP_EQUALS).
    Conflict between rule 52 and token ROP_NOTEQUALS resolved as shift (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 52 and token ROP_LESS resolved as shift (OP_MOD < ROP_LESS).
    Conflict between rule 52 and token ROP_LESSEQUALS resolved as shift (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 52 and token ROP_GREATER resolved as shift (OP_MOD < ROP_GREATER).
    Conflict between rule 52 and token ROP_GREATEREQUALS resolved as shift (OP_MOD < ROP_GREATEREQUALS).


State 115

   49 arithmetic_expr: expr • OP_POWER expr
   49                | expr OP_POWER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 49 (arithmetic_expr)

    Conflict between rule 49 and token KW_AND resolved as shift (OP_POWER < KW_AND).
    Conflict between rule 49 and token KW_OR resolved as shift (OP_POWER < KW_OR).
    Conflict between rule 49 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POWER).
    Conflict between rule 49 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POWER).
    Conflict between rule 49 and token OP_MULT resolved as reduce (OP_MULT < OP_POWER).
    Conflict between rule 49 and token OP_DIV resolved as reduce (OP_DIV < OP_POWER).
    Conflict between rule 49 and token OP_MOD resolved as reduce (OP_MOD < OP_POWER).
    Conflict between rule 49 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 49 and token ROP_EQUALS resolved as shift (OP_POWER < ROP_EQUALS).
    Conflict between rule 49 and token ROP_NOTEQUALS resolved as shift (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 49 and token ROP_LESS resolved as shift (OP_POWER < ROP_LESS).
    Conflict between rule 49 and token ROP_LESSEQUALS resolved as shift (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 49 and token ROP_GREATER resolved as shift (OP_POWER < ROP_GREATER).
    Conflict between rule 49 and token ROP_GREATEREQUALS resolved as shift (OP_POWER < ROP_GREATEREQUALS).


State 116

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   65                | expr ROP_EQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 65 (relational_expr)

    Conflict between rule 65 and token KW_AND resolved as shift (ROP_EQUALS < KW_AND).
    Conflict between rule 65 and token KW_OR resolved as shift (ROP_EQUALS < KW_OR).
    Conflict between rule 65 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_EQUALS).
    Conflict between rule 65 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_EQUALS).
    Conflict between rule 65 and token OP_MULT resolved as reduce (OP_MULT < ROP_EQUALS).
    Conflict between rule 65 and token OP_DIV resolved as reduce (OP_DIV < ROP_EQUALS).
    Conflict between rule 65 and token OP_MOD resolved as reduce (OP_MOD < ROP_EQUALS).
    Conflict between rule 65 and token OP_POWER resolved as reduce (OP_POWER < ROP_EQUALS).
    Conflict between rule 65 and token ROP_EQUALS resolved as reduce (%left ROP_EQUALS).
    Conflict between rule 65 and token ROP_NOTEQUALS resolved as shift (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 65 and token ROP_LESS resolved as shift (ROP_EQUALS < ROP_LESS).
    Conflict between rule 65 and token ROP_LESSEQUALS resolved as shift (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 65 and token ROP_GREATER resolved as shift (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 65 and token ROP_GREATEREQUALS resolved as shift (ROP_EQUALS < ROP_GREATEREQUALS).


State 117

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   66                | expr ROP_NOTEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 66 (relational_expr)

    Conflict between rule 66 and token KW_AND resolved as shift (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 66 and token KW_OR resolved as shift (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 66 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 66 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 66 and token OP_MULT resolved as reduce (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 66 and token OP_DIV resolved as reduce (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 66 and token OP_MOD resolved as reduce (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 66 and token OP_POWER resolved as reduce (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 66 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 66 and token ROP_NOTEQUALS resolved as reduce (%left ROP_NOTEQUALS).
    Conflict between rule 66 and token ROP_LESS resolved as shift (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 66 and token ROP_LESSEQUALS resolved as shift (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 66 and token ROP_GREATER resolved as shift (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 66 and token ROP_GREATEREQUALS resolved as shift (ROP_NOTEQUALS < ROP_GREATEREQUALS).


State 118

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   61                | expr ROP_LESS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 61 (relational_expr)

    Conflict between rule 61 and token KW_AND resolved as shift (ROP_LESS < KW_AND).
    Conflict between rule 61 and token KW_OR resolved as shift (ROP_LESS < KW_OR).
    Conflict between rule 61 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESS).
    Conflict between rule 61 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESS).
    Conflict between rule 61 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESS).
    Conflict between rule 61 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESS).
    Conflict between rule 61 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESS).
    Conflict between rule 61 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESS).
    Conflict between rule 61 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESS).
    Conflict between rule 61 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 61 and token ROP_LESS resolved as reduce (%left ROP_LESS).
    Conflict between rule 61 and token ROP_LESSEQUALS resolved as shift (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 61 and token ROP_GREATER resolved as shift (ROP_LESS < ROP_GREATER).
    Conflict between rule 61 and token ROP_GREATEREQUALS resolved as shift (ROP_LESS < ROP_GREATEREQUALS).


State 119

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   62                | expr ROP_LESSEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 62 (relational_expr)

    Conflict between rule 62 and token KW_AND resolved as shift (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 62 and token KW_OR resolved as shift (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 62 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 62 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 62 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 62 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_LESSEQUALS resolved as reduce (%left ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_GREATER resolved as shift (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 62 and token ROP_GREATEREQUALS resolved as shift (ROP_LESSEQUALS < ROP_GREATEREQUALS).


State 120

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   63                | expr ROP_GREATER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    ROP_GREATEREQUALS  shift, and go to state 87

    $default  reduce using rule 63 (relational_expr)

    Conflict between rule 63 and token KW_AND resolved as shift (ROP_GREATER < KW_AND).
    Conflict between rule 63 and token KW_OR resolved as shift (ROP_GREATER < KW_OR).
    Conflict between rule 63 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATER).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATER).
    Conflict between rule 63 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATER).
    Conflict between rule 63 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATER).
    Conflict between rule 63 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATER).
    Conflict between rule 63 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATER).
    Conflict between rule 63 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 63 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 63 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATER).
    Conflict between rule 63 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 63 and token ROP_GREATER resolved as reduce (%left ROP_GREATER).
    Conflict between rule 63 and token ROP_GREATEREQUALS resolved as shift (ROP_GREATER < ROP_GREATEREQUALS).


State 121

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   64                | expr ROP_GREATEREQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr

    KW_AND  shift, and go to state 74
    KW_OR   shift, and go to state 75

    $default  reduce using rule 64 (relational_expr)

    Conflict between rule 64 and token KW_AND resolved as shift (ROP_GREATEREQUALS < KW_AND).
    Conflict between rule 64 and token KW_OR resolved as shift (ROP_GREATEREQUALS < KW_OR).
    Conflict between rule 64 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATEREQUALS).
    Conflict between rule 64 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATEREQUALS).
    Conflict between rule 64 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATEREQUALS).
    Conflict between rule 64 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_GREATER resolved as reduce (ROP_GREATER < ROP_GREATEREQUALS).
    Conflict between rule 64 and token ROP_GREATEREQUALS resolved as reduce (%left ROP_GREATEREQUALS).


State 122

   37 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 158


State 123

   75 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type DEL_COMMA params

    DEL_COLON  shift, and go to state 159


State 124

   73 params: TK_IDENTIFIER DEL_COLON basic_data_type •  [DEL_RPAR]
   74       | TK_IDENTIFIER DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 160

    $default  reduce using rule 73 (params)


State 125

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 161


State 126

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 162
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 127

   18 identifier: TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   19           | TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET
   95 assign_statement: TK_IDENTIFIER • AOP_ASSIGN expr DEL_SMCOLON
   96                 | TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   98                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   99                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
  106 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  112 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    AOP_ASSIGN       shift, and go to state 163
    AOP_PLUSASSIGN   shift, and go to state 164
    AOP_MINASSIGN    shift, and go to state 165
    AOP_MULASSIGN    shift, and go to state 166
    AOP_DIVASSIGN    shift, and go to state 167
    AOP_MODASSIGN    shift, and go to state 168
    AOP_COLONASSIGN  shift, and go to state 169
    DEL_LPAR         shift, and go to state 67
    DEL_LBRACKET     shift, and go to state 14

    $default  reduce using rule 18 (identifier)


State 128

  101 if_statement: KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 170


State 129

  104 for_statement: KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 171


State 130

  103 while_statement: KW_WHILE • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_LPAR  shift, and go to state 172


State 131

  108 break_statement: KW_BREAK • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 173


State 132

  109 continue_statement: KW_CONTINUE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 174


State 133

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  110 return_statement: KW_RETURN • DEL_SMCOLON
  111                 | KW_RETURN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_SMCOLON    shift, and go to state 175
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 176
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 134

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   78          | variable_declaration • func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 177
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 135

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   79          | const • func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 178
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 136

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 179


State 137

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   80          | statements • func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 180
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 138

   83 statements: assign_statement •

    $default  reduce using rule 83 (statements)


State 139

   81 statements: if_statement •

    $default  reduce using rule 81 (statements)


State 140

   82 statements: while_statement •

    $default  reduce using rule 82 (statements)


State 141

   84 statements: for_statement •

    $default  reduce using rule 84 (statements)


State 142

   85 statements: array_int_comprehension •

    $default  reduce using rule 85 (statements)


State 143

   86 statements: array_comprehension •

    $default  reduce using rule 86 (statements)


State 144

   88 statements: break_statement •

    $default  reduce using rule 88 (statements)


State 145

   89 statements: continue_statement •

    $default  reduce using rule 89 (statements)


State 146

   87 statements: return_statement •

    $default  reduce using rule 87 (statements)


State 147

   90 statements: function_statement • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 181


State 148

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72 params: ε •  [DEL_RPAR]
   73       | • TK_IDENTIFIER DEL_COLON basic_data_type
   74       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   75       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 56

    $default  reduce using rule 72 (params)

    params  go to state 182


State 149

   30 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET
   31                 | HASH TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET

    TK_INTEGER    shift, and go to state 183
    DEL_RBRACKET  shift, and go to state 184


State 150

   24 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON •

    $default  reduce using rule 24 (comp)


State 151

   32 comp_identifiers: comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER
   33                 | comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 185


State 152

   27 comp_field: comp_identifiers DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 186


State 153

   22 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •

    $default  reduce using rule 22 (identifier)


State 154

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  114 function_arguments: • expr
  115                   | • expr DEL_COMMA function_arguments
  115                   | expr DEL_COMMA • function_arguments

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 102
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55
    function_arguments  go to state 187


State 155

  113 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR •

    $default  reduce using rule 113 (function_statement)


State 156

   59 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET •

    $default  reduce using rule 59 (identifier_expr)


State 157

   60 identifier_expr: TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET •

    $default  reduce using rule 60 (identifier_expr)


State 158

   37 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 37 (const)


State 159

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   75 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 188


State 160

   72 params: ε •  [DEL_RPAR]
   73       | • TK_IDENTIFIER DEL_COLON basic_data_type
   74       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   74       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA • params
   75       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 56

    $default  reduce using rule 72 (params)

    params  go to state 189


State 161

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 190


State 162

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 191


State 163

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   95 assign_statement: TK_IDENTIFIER AOP_ASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 192
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 164

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   96 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 193
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 165

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   97 assign_statement: TK_IDENTIFIER AOP_MINASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 194
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 166

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   98 assign_statement: TK_IDENTIFIER AOP_MULASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 195
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 167

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
   99 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 196
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 168

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  100 assign_statement: TK_IDENTIFIER AOP_MODASSIGN • expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 197
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 169

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 198


State 170

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  101 if_statement: KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 199
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 171

  104 for_statement: KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_IN  shift, and go to state 200


State 172

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  103 while_statement: KW_WHILE DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 201
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 173

  108 break_statement: KW_BREAK DEL_SMCOLON •

    $default  reduce using rule 108 (break_statement)


State 174

  109 continue_statement: KW_CONTINUE DEL_SMCOLON •

    $default  reduce using rule 109 (continue_statement)


State 175

  110 return_statement: KW_RETURN DEL_SMCOLON •

    $default  reduce using rule 110 (return_statement)


State 176

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  111 return_statement: KW_RETURN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 202


State 177

   78 func_body: variable_declaration func_body •

    $default  reduce using rule 78 (func_body)


State 178

   79 func_body: const func_body •

    $default  reduce using rule 79 (func_body)


State 179

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 203


State 180

   80 func_body: statements func_body •

    $default  reduce using rule 80 (func_body)


State 181

   90 statements: function_statement DEL_SMCOLON •

    $default  reduce using rule 90 (statements)


State 182

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 204


State 183

   30 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 205


State 184

   31 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 31 (comp_identifiers)


State 185

   32 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   33                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 206

    $default  reduce using rule 32 (comp_identifiers)


State 186

   27 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 27 (comp_field)


State 187

  115 function_arguments: expr DEL_COMMA function_arguments •

    $default  reduce using rule 115 (function_arguments)


State 188

   75 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type •  [DEL_RPAR]
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 207

    $default  reduce using rule 75 (params)


State 189

   74 params: TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 74 (params)


State 190

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 208
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 191

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 209


State 192

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   95 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 210


State 193

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   96 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 211


State 194

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   97 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 212


State 195

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   98 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 213


State 196

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
   99 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 214


State 197

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  100 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_SMCOLON        shift, and go to state 215


State 198

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 216
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 199

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  101 if_statement: KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_RPAR           shift, and go to state 217


State 200

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 218


State 201

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  103 while_statement: KW_WHILE DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_RPAR           shift, and go to state 219


State 202

  111 return_statement: KW_RETURN expr DEL_SMCOLON •

    $default  reduce using rule 111 (return_statement)


State 203

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 10 (main_func)


State 204

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   36              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 220
    DEL_COLON  shift, and go to state 221


State 205

   30 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •

    $default  reduce using rule 30 (comp_identifiers)


State 206

   33 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET
   34                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET

    TK_INTEGER    shift, and go to state 222
    DEL_RBRACKET  shift, and go to state 223


State 207

   72 params: ε •  [DEL_RPAR]
   73       | • TK_IDENTIFIER DEL_COLON basic_data_type
   74       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   75       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA • params

    TK_IDENTIFIER  shift, and go to state 56

    $default  reduce using rule 72 (params)

    params  go to state 224


State 208

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 225


State 209

   70 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 70 (function)


State 210

   95 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 95 (assign_statement)


State 211

   96 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 96 (assign_statement)


State 212

   97 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 97 (assign_statement)


State 213

   98 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 98 (assign_statement)


State 214

   99 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 99 (assign_statement)


State 215

  100 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 100 (assign_statement)


State 216

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_FOR             shift, and go to state 226
    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87


State 217

  101 if_statement: KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 227


State 218

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 228
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 219

  103 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_COLON  shift, and go to state 229


State 220

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 31
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 230


State 221

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 231
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 222

   33 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 232


State 223

   34 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 34 (comp_identifiers)


State 224

   76 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 76 (params)


State 225

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 233


State 226

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 234


State 227

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ELSE, KW_ENDIF]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  101             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 238
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 228

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_COLON          shift, and go to state 239


State 229

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ENDWHILE]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  103                | KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 240
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 230

   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 241


State 231

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 242


State 232

   33 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •

    $default  reduce using rule 33 (comp_identifiers)


State 233

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 71 (function)


State 234

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 243


State 235

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   92               | • variable_declaration statement_body
   92               | variable_declaration • statement_body
   93               | • const statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 244
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 236

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   93               | const • statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 245
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 237

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   94               | • statements statement_body
   94               | statements • statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 246
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 238

  101 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_ELSE   shift, and go to state 247
    KW_ENDIF  shift, and go to state 248


State 239

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 249
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 240

  103 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDWHILE DEL_SMCOLON

    KW_ENDWHILE  shift, and go to state 250


State 241

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   77 func_body: ε •  [KW_ENDDEF]
   78          | • variable_declaration func_body
   79          | • const func_body
   80          | • statements func_body
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 77 (func_body)

    variable_declaration     go to state 134
    identifier               go to state 10
    const                    go to state 135
    func_body                go to state 251
    statements               go to state 137
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 242

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 252


State 243

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 31
    TK_INTEGER     shift, and go to state 253
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 254


State 244

   92 statement_body: variable_declaration statement_body •

    $default  reduce using rule 92 (statement_body)


State 245

   93 statement_body: const statement_body •

    $default  reduce using rule 93 (statement_body)


State 246

   94 statement_body: statements statement_body •

    $default  reduce using rule 94 (statement_body)


State 247

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE • DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 255


State 248

  101 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 256


State 249

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_RBRACKET       shift, and go to state 257
    DEL_COLON          shift, and go to state 258


State 250

  103 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 259


State 251

   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 260


State 252

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 35 (comp_function)


State 253

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 261


State 254

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types • KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_IN  shift, and go to state 262


State 255

   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON • statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 263
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    statements               go to state 264
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 256

  101 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 101 (if_statement)


State 257

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 265


State 258

   38 expr: • identifier_expr
   39     | • TK_STRING
   40     | • KW_TRUE
   41     | • KW_FALSE
   42     | • DEL_LPAR expr DEL_RPAR
   43     | • arithmetic_expr
   44     | • relational_expr
   45     | • logical_statements
   46     | • function_statement
   47 arithmetic_expr: • TK_INTEGER
   48                | • TK_REAL
   49                | • expr OP_POWER expr
   50                | • expr OP_MULT expr
   51                | • expr OP_DIV expr
   52                | • expr OP_MOD expr
   53                | • expr OP_PLUS expr
   54                | • expr OP_MINUS expr
   55                | • OP_PLUS expr
   56                | • OP_MINUS expr
   57 identifier_expr: • TK_IDENTIFIER
   58                | • HASH TK_IDENTIFIER
   59                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   60                | • TK_IDENTIFIER DEL_LBRACKET arithmetic_expr DEL_RBRACKET
   61 relational_expr: • expr ROP_LESS expr
   62                | • expr ROP_LESSEQUALS expr
   63                | • expr ROP_GREATER expr
   64                | • expr ROP_GREATEREQUALS expr
   65                | • expr ROP_EQUALS expr
   66                | • expr ROP_NOTEQUALS expr
   67 logical_statements: • KW_NOT expr
   68                   | • expr KW_AND expr
   69                   | • expr KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    HASH           shift, and go to state 49

    expr                go to state 266
    arithmetic_expr     go to state 51
    identifier_expr     go to state 52
    relational_expr     go to state 53
    logical_statements  go to state 54
    function_statement  go to state 55


State 259

  103 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON •

    $default  reduce using rule 103 (while_statement)


State 260

   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 267


State 261

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 268


State 262

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN • TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 269


State 263

   95 assign_statement: TK_IDENTIFIER • AOP_ASSIGN expr DEL_SMCOLON
   96                 | TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   98                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   99                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
  106 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  112 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    AOP_ASSIGN       shift, and go to state 163
    AOP_PLUSASSIGN   shift, and go to state 164
    AOP_MINASSIGN    shift, and go to state 165
    AOP_MULASSIGN    shift, and go to state 166
    AOP_DIVASSIGN    shift, and go to state 167
    AOP_MODASSIGN    shift, and go to state 168
    AOP_COLONASSIGN  shift, and go to state 169
    DEL_LPAR         shift, and go to state 67


State 264

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements • KW_ENDIF DEL_SMCOLON

    KW_ENDIF  shift, and go to state 270


State 265

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ENDFOR]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  104              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 271
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 266

   49 arithmetic_expr: expr • OP_POWER expr
   50                | expr • OP_MULT expr
   51                | expr • OP_DIV expr
   52                | expr • OP_MOD expr
   53                | expr • OP_PLUS expr
   54                | expr • OP_MINUS expr
   61 relational_expr: expr • ROP_LESS expr
   62                | expr • ROP_LESSEQUALS expr
   63                | expr • ROP_GREATER expr
   64                | expr • ROP_GREATEREQUALS expr
   65                | expr • ROP_EQUALS expr
   66                | expr • ROP_NOTEQUALS expr
   68 logical_statements: expr • KW_AND expr
   69                   | expr • KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 74
    KW_OR              shift, and go to state 75
    OP_PLUS            shift, and go to state 76
    OP_MINUS           shift, and go to state 77
    OP_MULT            shift, and go to state 78
    OP_DIV             shift, and go to state 79
    OP_MOD             shift, and go to state 80
    OP_POWER           shift, and go to state 81
    ROP_EQUALS         shift, and go to state 82
    ROP_NOTEQUALS      shift, and go to state 83
    ROP_LESS           shift, and go to state 84
    ROP_LESSEQUALS     shift, and go to state 85
    ROP_GREATER        shift, and go to state 86
    ROP_GREATEREQUALS  shift, and go to state 87
    DEL_RBRACKET       shift, and go to state 272


State 267

   36 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 36 (comp_function)


State 268

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 31
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 273


State 269

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER • KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_OF  shift, and go to state 274


State 270

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 275


State 271

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 276


State 272

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 277


State 273

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 278


State 274

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 279


State 275

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 102 (if_statement)


State 276

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 280


State 277

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • TK_IDENTIFIER
   19           | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   20           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   21           | • identifier DEL_COMMA TK_IDENTIFIER
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   23           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   37 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   81 statements: • if_statement
   82           | • while_statement
   83           | • assign_statement
   84           | • for_statement
   85           | • array_int_comprehension
   86           | • array_comprehension
   87           | • return_statement
   88           | • break_statement
   89           | • continue_statement
   90           | • function_statement DEL_SMCOLON
   91 statement_body: ε •  [KW_ENDFOR]
   92               | • variable_declaration statement_body
   93               | • const statement_body
   94               | • statements statement_body
   95 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   96                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   97                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   98                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   99                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
  100                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
  101 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  103 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
  106 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  107 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 break_statement: • KW_BREAK DEL_SMCOLON
  109 continue_statement: • KW_CONTINUE DEL_SMCOLON
  110 return_statement: • KW_RETURN DEL_SMCOLON
  111                 | • KW_RETURN expr DEL_SMCOLON
  112 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 127
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 128
    KW_FOR         shift, and go to state 129
    KW_WHILE       shift, and go to state 130
    KW_BREAK       shift, and go to state 131
    KW_CONTINUE    shift, and go to state 132
    KW_RETURN      shift, and go to state 133

    $default  reduce using rule 91 (statement_body)

    variable_declaration     go to state 235
    identifier               go to state 10
    const                    go to state 236
    statements               go to state 237
    statement_body           go to state 281
    assign_statement         go to state 138
    if_statement             go to state 139
    while_statement          go to state 140
    for_statement            go to state 141
    array_int_comprehension  go to state 142
    array_comprehension      go to state 143
    break_statement          go to state 144
    continue_statement       go to state 145
    return_statement         go to state 146
    function_statement       go to state 147


State 278

  106 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 106 (array_int_comprehension)


State 279

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 282


State 280

  104 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 104 (for_statement)


State 281

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 283


State 282

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 284


State 283

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 285


State 284

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 31
    KW_INT         shift, and go to state 32
    KW_SCALAR      shift, and go to state 33
    KW_STR         shift, and go to state 34
    KW_BOOLEAN     shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 286


State 285

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 105 (for_statement)


State 286

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 287


State 287

  107 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 107 (array_comprehension)
