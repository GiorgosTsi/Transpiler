Terminals unused in grammar

    KW_BREAK
    KW_CONTINUE
    AOP_HASHASSIGN
    DEL_DOT


Grammar

    0 $accept: input $end

    1 input: ε
    2      | declarations main_func
    3      | main_func

    4 declarations: declarations declaration
    5             | declaration

    6 declaration: variable_declaration
    7            | comp
    8            | const
    9            | function

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   11 variable_declaration: identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON

   14 basic_data_type: KW_INT
   15                | KW_SCALAR
   16                | KW_STR
   17                | KW_BOOLEAN

   18 types: basic_data_type

   19 identifier: TK_IDENTIFIER
   20           | identifier DEL_COMMA TK_IDENTIFIER

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

   22 comp_body: comp_field
   23          | comp_field comp_body

   24 comp_field: comp_identifiers DEL_COLON basic_data_type DEL_SMCOLON
   25           | function

   26 comp_identifiers: HASH TK_IDENTIFIER
   27                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER

   28 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

   29 expr: TK_IDENTIFIER
   30     | TK_STRING
   31     | KW_TRUE
   32     | KW_FALSE
   33     | DEL_LPAR expr DEL_RPAR
   34     | arithmetic_expr
   35     | relational_expr
   36     | logical_statements

   37 arithmetic_expr: TK_INTEGER
   38                | TK_REAL
   39                | expr OP_POWER expr
   40                | expr OP_MULT expr
   41                | expr OP_DIV expr
   42                | expr OP_MOD expr
   43                | expr OP_PLUS expr
   44                | expr OP_MINUS expr
   45                | OP_PLUS expr
   46                | OP_MINUS expr

   47 relational_expr: expr ROP_LESS expr
   48                | expr ROP_LESSEQUALS expr
   49                | expr ROP_GREATER expr
   50                | expr ROP_GREATEREQUALS expr
   51                | expr ROP_EQUALS expr
   52                | expr ROP_NOTEQUALS expr

   53 logical_statements: KW_NOT expr
   54                   | expr KW_AND expr
   55                   | expr KW_OR expr

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   58 params: ε
   59       | TK_IDENTIFIER DEL_COLON basic_data_type
   60       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   61       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   62       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

   63 func_body: ε
   64          | variable_declaration func_body
   65          | statements func_body

   66 statements: if_statement
   67           | while_statement
   68           | assign_statement
   69           | for_statement
   70           | array_int_comprehension
   71           | array_comprehension
   72           | return_statement
   73           | function_statement

   74 statement_body: ε
   75               | variable_declaration statement_body
   76               | statements statement_body

   77 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON

   83 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

   85 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

   90 return_statement: KW_RETURN DEL_SMCOLON
   91                 | KW_RETURN expr DEL_SMCOLON

   92 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

   94 function_arguments: expr
   95                   | expr DEL_COMMA function_arguments


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TK_IDENTIFIER <str> (258) 12 13 19 20 21 26 27 29 56 57 59 60 61 62 77 78 79 80 81 82 86 87 88 89 92 93
    TK_INTEGER <str> (259) 12 37 88 89
    TK_REAL <str> (260) 38
    TK_STRING <str> (261) 30
    KW_INT (262) 14
    KW_SCALAR (263) 15
    KW_STR (264) 16
    KW_BOOLEAN (265) 17
    KW_TRUE (266) 31
    KW_FALSE (267) 32
    KW_CONST (268) 28
    KW_IF (269) 83 84
    KW_ELSE (270) 84
    KW_ENDIF (271) 83 84
    KW_FOR (272) 86 87 88 89
    KW_IN (273) 86 87 89
    KW_ENDFOR (274) 86 87
    KW_WHILE (275) 85
    KW_ENDWHILE (276) 85
    KW_BREAK (277)
    KW_CONTINUE (278)
    KW_NOT (279) 53
    KW_AND (280) 54
    KW_OR (281) 55
    KW_DEF (282) 10 56 57
    KW_ENDDEF (283) 10 56 57
    KW_MAIN (284) 10
    KW_RETURN (285) 90 91
    KW_COMP (286) 21
    KW_ENDCOMP (287) 21
    KW_OF (288) 89
    OP_PLUS (289) 43 45
    OP_MINUS (290) 44 46
    OP_MULT (291) 40
    OP_DIV (292) 41
    OP_MOD (293) 42
    OP_POWER (294) 39
    ROP_EQUALS (295) 51
    ROP_NOTEQUALS (296) 52
    ROP_LESS (297) 47
    ROP_LESSEQUALS (298) 48
    ROP_GREATER (299) 49
    ROP_GREATEREQUALS (300) 50
    AOP_ASSIGN (301) 28 77
    AOP_PLUSASSIGN (302) 78
    AOP_MINASSIGN (303) 79
    AOP_MULASSIGN (304) 80
    AOP_DIVASSIGN (305) 81
    AOP_MODASSIGN (306) 82
    AOP_COLONASSIGN (307) 88 89
    AOP_HASHASSIGN (308)
    AOP_ARROW (309) 57
    DEL_SMCOLON (310) 10 11 12 13 21 24 28 56 57 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93
    DEL_LPAR (311) 10 33 56 57 83 84 85 92 93
    DEL_RPAR (312) 10 33 56 57 83 84 85 92 93
    DEL_COMMA (313) 20 27 60 62 95
    DEL_LBRACKET (314) 12 13 61 62 86 87 88 89
    DEL_RBRACKET (315) 12 13 61 62 86 87 88 89
    DEL_COLON (316) 10 11 12 13 21 24 28 56 57 59 60 61 62 83 84 85 86 87 88 89
    DEL_DOT (317)
    HASH (318) 26 27


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    input (65)
        on left: 1 2 3
        on right: 0
    declarations <str> (66)
        on left: 4 5
        on right: 2 4
    declaration <str> (67)
        on left: 6 7 8 9
        on right: 4 5
    main_func <str> (68)
        on left: 10
        on right: 2 3
    variable_declaration <str> (69)
        on left: 11 12 13
        on right: 6 64 75
    basic_data_type <str> (70)
        on left: 14 15 16 17
        on right: 11 12 13 18 24 28 57 59 60 61 62
    types <str> (71)
        on left: 18
        on right: 88 89
    identifier <str> (72)
        on left: 19 20
        on right: 11 20 28
    comp <str> (73)
        on left: 21
        on right: 7
    comp_body <str> (74)
        on left: 22 23
        on right: 21 23
    comp_field <str> (75)
        on left: 24 25
        on right: 22 23
    comp_identifiers <str> (76)
        on left: 26 27
        on right: 24 27
    const <str> (77)
        on left: 28
        on right: 8
    expr <str> (78)
        on left: 29 30 31 32 33 34 35 36
        on right: 28 33 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 77 78 79 80 81 82 83 84 85 86 87 88 89 91 94 95
    arithmetic_expr <str> (79)
        on left: 37 38 39 40 41 42 43 44 45 46
        on right: 34
    relational_expr <str> (80)
        on left: 47 48 49 50 51 52
        on right: 35
    logical_statements <str> (81)
        on left: 53 54 55
        on right: 36
    function <str> (82)
        on left: 56 57
        on right: 9 25
    params <str> (83)
        on left: 58 59 60 61 62
        on right: 56 57 60 62
    func_body <str> (84)
        on left: 63 64 65
        on right: 10 56 57 64 65
    statements <str> (85)
        on left: 66 67 68 69 70 71 72 73
        on right: 65 76 84
    statement_body <str> (86)
        on left: 74 75 76
        on right: 75 76 83 84 85 86 87
    assign_statement <str> (87)
        on left: 77 78 79 80 81 82
        on right: 68
    if_statement <str> (88)
        on left: 83 84
        on right: 66
    while_statement <str> (89)
        on left: 85
        on right: 67
    for_statement <str> (90)
        on left: 86 87
        on right: 69
    array_int_comprehension <str> (91)
        on left: 88
        on right: 70
    array_comprehension <str> (92)
        on left: 89
        on right: 71
    return_statement <str> (93)
        on left: 90 91
        on right: 72
    function_statement <str> (94)
        on left: 92 93
        on right: 73
    function_arguments <str> (95)
        on left: 94 95
        on right: 93 95


State 0

    0 $accept: • input $end
    1 input: ε •  [$end]
    2      | • declarations main_func
    3      | • main_func
    4 declarations: • declarations declaration
    5             | • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   28 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    $default  reduce using rule 1 (input)

    input                 go to state 5
    declarations          go to state 6
    declaration           go to state 7
    main_func             go to state 8
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 1

   12 variable_declaration: TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]

    DEL_LBRACKET  shift, and go to state 14

    $default  reduce using rule 19 (identifier)


State 2

   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   28 const: KW_CONST • identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 15

    identifier  go to state 16


State 3

   10 main_func: KW_DEF • KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   56 function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 17
    KW_MAIN        shift, and go to state 18


State 4

   21 comp: KW_COMP • TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 19


State 5

    0 $accept: input • $end

    $end  shift, and go to state 20


State 6

    2 input: declarations • main_func
    4 declarations: declarations • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   28 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    declaration           go to state 21
    main_func             go to state 22
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 7

    5 declarations: declaration •

    $default  reduce using rule 5 (declarations)


State 8

    3 input: main_func •

    $default  reduce using rule 3 (input)


State 9

    6 declaration: variable_declaration •

    $default  reduce using rule 6 (declaration)


State 10

   11 variable_declaration: identifier • DEL_COLON basic_data_type DEL_SMCOLON
   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER

    DEL_COMMA  shift, and go to state 23
    DEL_COLON  shift, and go to state 24


State 11

    7 declaration: comp •

    $default  reduce using rule 7 (declaration)


State 12

    8 declaration: const •

    $default  reduce using rule 8 (declaration)


State 13

    9 declaration: function •

    $default  reduce using rule 9 (declaration)


State 14

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON

    TK_INTEGER    shift, and go to state 25
    DEL_RBRACKET  shift, and go to state 26


State 15

   19 identifier: TK_IDENTIFIER •

    $default  reduce using rule 19 (identifier)


State 16

   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   28 const: KW_CONST identifier • AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    AOP_ASSIGN  shift, and go to state 27
    DEL_COMMA   shift, and go to state 23


State 17

   56 function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 28


State 18

   10 main_func: KW_DEF KW_MAIN • DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 29


State 19

   21 comp: KW_COMP TK_IDENTIFIER • DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    DEL_COLON  shift, and go to state 30


State 20

    0 $accept: input $end •

    $default  accept


State 21

    4 declarations: declarations declaration •

    $default  reduce using rule 4 (declarations)


State 22

    2 input: declarations main_func •

    $default  reduce using rule 2 (input)


State 23

   20 identifier: identifier DEL_COMMA • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 31


State 24

   11 variable_declaration: identifier DEL_COLON • basic_data_type DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36


State 25

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 37


State 26

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type DEL_SMCOLON

    DEL_COLON  shift, and go to state 38


State 27

   28 const: KW_CONST identifier AOP_ASSIGN • expr DEL_COLON basic_data_type DEL_SMCOLON
   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 49
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 28

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   58 params: ε •  [DEL_RPAR]
   59       | • TK_IDENTIFIER DEL_COLON basic_data_type
   60       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   61       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   62       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 58 (params)

    params  go to state 54


State 29

   10 main_func: KW_DEF KW_MAIN DEL_LPAR • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 55


State 30

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON • comp_body KW_ENDCOMP DEL_SMCOLON
   22 comp_body: • comp_field
   23          | • comp_field comp_body
   24 comp_field: • comp_identifiers DEL_COLON basic_data_type DEL_SMCOLON
   25           | • function
   26 comp_identifiers: • HASH TK_IDENTIFIER
   27                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   56 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 56
    HASH    shift, and go to state 57

    comp_body         go to state 58
    comp_field        go to state 59
    comp_identifiers  go to state 60
    function          go to state 61


State 31

   20 identifier: identifier DEL_COMMA TK_IDENTIFIER •

    $default  reduce using rule 20 (identifier)


State 32

   14 basic_data_type: KW_INT •

    $default  reduce using rule 14 (basic_data_type)


State 33

   15 basic_data_type: KW_SCALAR •

    $default  reduce using rule 15 (basic_data_type)


State 34

   16 basic_data_type: KW_STR •

    $default  reduce using rule 16 (basic_data_type)


State 35

   17 basic_data_type: KW_BOOLEAN •

    $default  reduce using rule 17 (basic_data_type)


State 36

   11 variable_declaration: identifier DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 62


State 37

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET • DEL_COLON basic_data_type DEL_SMCOLON

    DEL_COLON  shift, and go to state 63


State 38

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 64


State 39

   29 expr: TK_IDENTIFIER •

    $default  reduce using rule 29 (expr)


State 40

   37 arithmetic_expr: TK_INTEGER •

    $default  reduce using rule 37 (arithmetic_expr)


State 41

   38 arithmetic_expr: TK_REAL •

    $default  reduce using rule 38 (arithmetic_expr)


State 42

   30 expr: TK_STRING •

    $default  reduce using rule 30 (expr)


State 43

   31 expr: KW_TRUE •

    $default  reduce using rule 31 (expr)


State 44

   32 expr: KW_FALSE •

    $default  reduce using rule 32 (expr)


State 45

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   53                   | KW_NOT • expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 65
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 46

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   45                | OP_PLUS • expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 66
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 47

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   46                | OP_MINUS • expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 67
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 48

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   33     | DEL_LPAR • expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 68
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 49

   28 const: KW_CONST identifier AOP_ASSIGN expr • DEL_COLON basic_data_type DEL_SMCOLON
   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_COLON          shift, and go to state 83


State 50

   34 expr: arithmetic_expr •

    $default  reduce using rule 34 (expr)


State 51

   35 expr: relational_expr •

    $default  reduce using rule 35 (expr)


State 52

   36 expr: logical_statements •

    $default  reduce using rule 36 (expr)


State 53

   59 params: TK_IDENTIFIER • DEL_COLON basic_data_type
   60       | TK_IDENTIFIER • DEL_COLON basic_data_type DEL_COMMA params
   61       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   62       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_LBRACKET  shift, and go to state 84
    DEL_COLON     shift, and go to state 85


State 54

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 86


State 55

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 87


State 56

   56 function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 17


State 57

   26 comp_identifiers: HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 88


State 58

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body • KW_ENDCOMP DEL_SMCOLON

    KW_ENDCOMP  shift, and go to state 89


State 59

   22 comp_body: • comp_field
   22          | comp_field •  [KW_ENDCOMP]
   23          | • comp_field comp_body
   23          | comp_field • comp_body
   24 comp_field: • comp_identifiers DEL_COLON basic_data_type DEL_SMCOLON
   25           | • function
   26 comp_identifiers: • HASH TK_IDENTIFIER
   27                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   56 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 56
    HASH    shift, and go to state 57

    $default  reduce using rule 22 (comp_body)

    comp_body         go to state 90
    comp_field        go to state 59
    comp_identifiers  go to state 60
    function          go to state 61


State 60

   24 comp_field: comp_identifiers • DEL_COLON basic_data_type DEL_SMCOLON
   27 comp_identifiers: comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER

    DEL_COMMA  shift, and go to state 91
    DEL_COLON  shift, and go to state 92


State 61

   25 comp_field: function •

    $default  reduce using rule 25 (comp_field)


State 62

   11 variable_declaration: identifier DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 11 (variable_declaration)


State 63

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON • basic_data_type DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 93


State 64

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 94


State 65

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   53 logical_statements: KW_NOT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54                   | expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND  shift, and go to state 69
    KW_OR   shift, and go to state 70

    $default  reduce using rule 53 (logical_statements)

    Conflict between rule 53 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 53 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 53 and token OP_PLUS resolved as reduce (OP_PLUS < KW_NOT).
    Conflict between rule 53 and token OP_MINUS resolved as reduce (OP_MINUS < KW_NOT).
    Conflict between rule 53 and token OP_MULT resolved as reduce (OP_MULT < KW_NOT).
    Conflict between rule 53 and token OP_DIV resolved as reduce (OP_DIV < KW_NOT).
    Conflict between rule 53 and token OP_MOD resolved as reduce (OP_MOD < KW_NOT).
    Conflict between rule 53 and token OP_POWER resolved as reduce (OP_POWER < KW_NOT).
    Conflict between rule 53 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_NOT).
    Conflict between rule 53 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_NOT).
    Conflict between rule 53 and token ROP_LESS resolved as reduce (ROP_LESS < KW_NOT).
    Conflict between rule 53 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_NOT).
    Conflict between rule 53 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_NOT).
    Conflict between rule 53 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_NOT).


State 66

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   45                | OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 45 (arithmetic_expr)

    Conflict between rule 45 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 45 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 45 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 45 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 45 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 45 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 45 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 45 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 45 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 45 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 45 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 45 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 45 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 45 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 67

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   46                | OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 46 (arithmetic_expr)

    Conflict between rule 46 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 46 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 46 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 46 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 46 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 46 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 46 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 46 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 46 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 46 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 46 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 46 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 46 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 46 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 68

   33 expr: DEL_LPAR expr • DEL_RPAR
   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_RPAR           shift, and go to state 95


State 69

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   54                   | expr KW_AND • expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 96
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 70

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   55                   | expr KW_OR • expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 97
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 71

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   43                | expr OP_PLUS • expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 98
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 72

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   44                | expr OP_MINUS • expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 99
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 73

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   40                | expr OP_MULT • expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 100
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 74

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   41                | expr OP_DIV • expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 101
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 75

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   42                | expr OP_MOD • expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 102
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 76

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   39                | expr OP_POWER • expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 103
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 77

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   51                | expr ROP_EQUALS • expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 104
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 78

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   52                | expr ROP_NOTEQUALS • expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 105
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 79

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   47                | expr ROP_LESS • expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 106
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 80

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   48                | expr ROP_LESSEQUALS • expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 107
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 81

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   49                | expr ROP_GREATER • expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 108
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 82

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   50                | expr ROP_GREATEREQUALS • expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 109
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 83

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   28 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON • basic_data_type DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 110


State 84

   61 params: TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type
   62       | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_RBRACKET  shift, and go to state 111


State 85

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   59 params: TK_IDENTIFIER DEL_COLON • basic_data_type
   60       | TK_IDENTIFIER DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 112


State 86

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   57         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 113
    DEL_COLON  shift, and go to state 114


State 87

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   63 func_body: ε •  [KW_ENDDEF]
   64          | • variable_declaration func_body
   65          | • statements func_body
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 63 (func_body)

    variable_declaration     go to state 120
    identifier               go to state 10
    func_body                go to state 121
    statements               go to state 122
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 88

   26 comp_identifiers: HASH TK_IDENTIFIER •

    $default  reduce using rule 26 (comp_identifiers)


State 89

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 131


State 90

   23 comp_body: comp_field comp_body •

    $default  reduce using rule 23 (comp_body)


State 91

   27 comp_identifiers: comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER

    HASH  shift, and go to state 132


State 92

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   24 comp_field: comp_identifiers DEL_COLON • basic_data_type DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 133


State 93

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 134


State 94

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 13 (variable_declaration)


State 95

   33 expr: DEL_LPAR expr DEL_RPAR •

    $default  reduce using rule 33 (expr)


State 96

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   54                   | expr KW_AND expr •  [KW_FOR, KW_AND, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   55                   | expr • KW_OR expr

    KW_OR  shift, and go to state 70

    $default  reduce using rule 54 (logical_statements)

    Conflict between rule 54 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 54 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 54 and token OP_PLUS resolved as reduce (OP_PLUS < KW_AND).
    Conflict between rule 54 and token OP_MINUS resolved as reduce (OP_MINUS < KW_AND).
    Conflict between rule 54 and token OP_MULT resolved as reduce (OP_MULT < KW_AND).
    Conflict between rule 54 and token OP_DIV resolved as reduce (OP_DIV < KW_AND).
    Conflict between rule 54 and token OP_MOD resolved as reduce (OP_MOD < KW_AND).
    Conflict between rule 54 and token OP_POWER resolved as reduce (OP_POWER < KW_AND).
    Conflict between rule 54 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_AND).
    Conflict between rule 54 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 54 and token ROP_LESS resolved as reduce (ROP_LESS < KW_AND).
    Conflict between rule 54 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 54 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_AND).
    Conflict between rule 54 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_AND).


State 97

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   55                   | expr KW_OR expr •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]

    $default  reduce using rule 55 (logical_statements)

    Conflict between rule 55 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 55 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 55 and token OP_PLUS resolved as reduce (OP_PLUS < KW_OR).
    Conflict between rule 55 and token OP_MINUS resolved as reduce (OP_MINUS < KW_OR).
    Conflict between rule 55 and token OP_MULT resolved as reduce (OP_MULT < KW_OR).
    Conflict between rule 55 and token OP_DIV resolved as reduce (OP_DIV < KW_OR).
    Conflict between rule 55 and token OP_MOD resolved as reduce (OP_MOD < KW_OR).
    Conflict between rule 55 and token OP_POWER resolved as reduce (OP_POWER < KW_OR).
    Conflict between rule 55 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_OR).
    Conflict between rule 55 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 55 and token ROP_LESS resolved as reduce (ROP_LESS < KW_OR).
    Conflict between rule 55 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 55 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_OR).
    Conflict between rule 55 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_OR).


State 98

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   43                | expr OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 43 (arithmetic_expr)

    Conflict between rule 43 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 43 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 43 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 43 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 43 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 43 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 43 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 43 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 43 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 43 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 43 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 43 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 43 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 43 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 99

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   44                | expr OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 44 (arithmetic_expr)

    Conflict between rule 44 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 44 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 44 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 44 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 44 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 44 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 44 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 44 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 44 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 44 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 44 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 44 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 44 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 44 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 100

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   40                | expr OP_MULT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 40 (arithmetic_expr)

    Conflict between rule 40 and token KW_AND resolved as shift (OP_MULT < KW_AND).
    Conflict between rule 40 and token KW_OR resolved as shift (OP_MULT < KW_OR).
    Conflict between rule 40 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 40 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 40 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 40 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 40 and token OP_MOD resolved as shift (OP_MULT < OP_MOD).
    Conflict between rule 40 and token OP_POWER resolved as shift (OP_MULT < OP_POWER).
    Conflict between rule 40 and token ROP_EQUALS resolved as shift (OP_MULT < ROP_EQUALS).
    Conflict between rule 40 and token ROP_NOTEQUALS resolved as shift (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 40 and token ROP_LESS resolved as shift (OP_MULT < ROP_LESS).
    Conflict between rule 40 and token ROP_LESSEQUALS resolved as shift (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 40 and token ROP_GREATER resolved as shift (OP_MULT < ROP_GREATER).
    Conflict between rule 40 and token ROP_GREATEREQUALS resolved as shift (OP_MULT < ROP_GREATEREQUALS).


State 101

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   41                | expr OP_DIV expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 41 (arithmetic_expr)

    Conflict between rule 41 and token KW_AND resolved as shift (OP_DIV < KW_AND).
    Conflict between rule 41 and token KW_OR resolved as shift (OP_DIV < KW_OR).
    Conflict between rule 41 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 41 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 41 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 41 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 41 and token OP_MOD resolved as shift (OP_DIV < OP_MOD).
    Conflict between rule 41 and token OP_POWER resolved as shift (OP_DIV < OP_POWER).
    Conflict between rule 41 and token ROP_EQUALS resolved as shift (OP_DIV < ROP_EQUALS).
    Conflict between rule 41 and token ROP_NOTEQUALS resolved as shift (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 41 and token ROP_LESS resolved as shift (OP_DIV < ROP_LESS).
    Conflict between rule 41 and token ROP_LESSEQUALS resolved as shift (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 41 and token ROP_GREATER resolved as shift (OP_DIV < ROP_GREATER).
    Conflict between rule 41 and token ROP_GREATEREQUALS resolved as shift (OP_DIV < ROP_GREATEREQUALS).


State 102

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   42                | expr OP_MOD expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 42 (arithmetic_expr)

    Conflict between rule 42 and token KW_AND resolved as shift (OP_MOD < KW_AND).
    Conflict between rule 42 and token KW_OR resolved as shift (OP_MOD < KW_OR).
    Conflict between rule 42 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 42 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 42 and token OP_MULT resolved as reduce (OP_MULT < OP_MOD).
    Conflict between rule 42 and token OP_DIV resolved as reduce (OP_DIV < OP_MOD).
    Conflict between rule 42 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 42 and token OP_POWER resolved as shift (OP_MOD < OP_POWER).
    Conflict between rule 42 and token ROP_EQUALS resolved as shift (OP_MOD < ROP_EQUALS).
    Conflict between rule 42 and token ROP_NOTEQUALS resolved as shift (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 42 and token ROP_LESS resolved as shift (OP_MOD < ROP_LESS).
    Conflict between rule 42 and token ROP_LESSEQUALS resolved as shift (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 42 and token ROP_GREATER resolved as shift (OP_MOD < ROP_GREATER).
    Conflict between rule 42 and token ROP_GREATEREQUALS resolved as shift (OP_MOD < ROP_GREATEREQUALS).


State 103

   39 arithmetic_expr: expr • OP_POWER expr
   39                | expr OP_POWER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 39 (arithmetic_expr)

    Conflict between rule 39 and token KW_AND resolved as shift (OP_POWER < KW_AND).
    Conflict between rule 39 and token KW_OR resolved as shift (OP_POWER < KW_OR).
    Conflict between rule 39 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POWER).
    Conflict between rule 39 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POWER).
    Conflict between rule 39 and token OP_MULT resolved as reduce (OP_MULT < OP_POWER).
    Conflict between rule 39 and token OP_DIV resolved as reduce (OP_DIV < OP_POWER).
    Conflict between rule 39 and token OP_MOD resolved as reduce (OP_MOD < OP_POWER).
    Conflict between rule 39 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 39 and token ROP_EQUALS resolved as shift (OP_POWER < ROP_EQUALS).
    Conflict between rule 39 and token ROP_NOTEQUALS resolved as shift (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 39 and token ROP_LESS resolved as shift (OP_POWER < ROP_LESS).
    Conflict between rule 39 and token ROP_LESSEQUALS resolved as shift (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 39 and token ROP_GREATER resolved as shift (OP_POWER < ROP_GREATER).
    Conflict between rule 39 and token ROP_GREATEREQUALS resolved as shift (OP_POWER < ROP_GREATEREQUALS).


State 104

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   51                | expr ROP_EQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 51 (relational_expr)

    Conflict between rule 51 and token KW_AND resolved as shift (ROP_EQUALS < KW_AND).
    Conflict between rule 51 and token KW_OR resolved as shift (ROP_EQUALS < KW_OR).
    Conflict between rule 51 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_EQUALS).
    Conflict between rule 51 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_EQUALS).
    Conflict between rule 51 and token OP_MULT resolved as reduce (OP_MULT < ROP_EQUALS).
    Conflict between rule 51 and token OP_DIV resolved as reduce (OP_DIV < ROP_EQUALS).
    Conflict between rule 51 and token OP_MOD resolved as reduce (OP_MOD < ROP_EQUALS).
    Conflict between rule 51 and token OP_POWER resolved as reduce (OP_POWER < ROP_EQUALS).
    Conflict between rule 51 and token ROP_EQUALS resolved as reduce (%left ROP_EQUALS).
    Conflict between rule 51 and token ROP_NOTEQUALS resolved as shift (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 51 and token ROP_LESS resolved as shift (ROP_EQUALS < ROP_LESS).
    Conflict between rule 51 and token ROP_LESSEQUALS resolved as shift (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 51 and token ROP_GREATER resolved as shift (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 51 and token ROP_GREATEREQUALS resolved as shift (ROP_EQUALS < ROP_GREATEREQUALS).


State 105

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   52                | expr ROP_NOTEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 52 (relational_expr)

    Conflict between rule 52 and token KW_AND resolved as shift (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 52 and token KW_OR resolved as shift (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 52 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 52 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 52 and token OP_MULT resolved as reduce (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 52 and token OP_DIV resolved as reduce (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 52 and token OP_MOD resolved as reduce (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 52 and token OP_POWER resolved as reduce (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 52 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 52 and token ROP_NOTEQUALS resolved as reduce (%left ROP_NOTEQUALS).
    Conflict between rule 52 and token ROP_LESS resolved as shift (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 52 and token ROP_LESSEQUALS resolved as shift (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 52 and token ROP_GREATER resolved as shift (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 52 and token ROP_GREATEREQUALS resolved as shift (ROP_NOTEQUALS < ROP_GREATEREQUALS).


State 106

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   47                | expr ROP_LESS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 47 (relational_expr)

    Conflict between rule 47 and token KW_AND resolved as shift (ROP_LESS < KW_AND).
    Conflict between rule 47 and token KW_OR resolved as shift (ROP_LESS < KW_OR).
    Conflict between rule 47 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESS).
    Conflict between rule 47 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESS).
    Conflict between rule 47 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESS).
    Conflict between rule 47 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESS).
    Conflict between rule 47 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESS).
    Conflict between rule 47 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESS).
    Conflict between rule 47 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESS).
    Conflict between rule 47 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 47 and token ROP_LESS resolved as reduce (%left ROP_LESS).
    Conflict between rule 47 and token ROP_LESSEQUALS resolved as shift (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 47 and token ROP_GREATER resolved as shift (ROP_LESS < ROP_GREATER).
    Conflict between rule 47 and token ROP_GREATEREQUALS resolved as shift (ROP_LESS < ROP_GREATEREQUALS).


State 107

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   48                | expr ROP_LESSEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 48 (relational_expr)

    Conflict between rule 48 and token KW_AND resolved as shift (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 48 and token KW_OR resolved as shift (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 48 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 48 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 48 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 48 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 48 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 48 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_LESSEQUALS resolved as reduce (%left ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_GREATER resolved as shift (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 48 and token ROP_GREATEREQUALS resolved as shift (ROP_LESSEQUALS < ROP_GREATEREQUALS).


State 108

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   49                | expr ROP_GREATER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    ROP_GREATEREQUALS  shift, and go to state 82

    $default  reduce using rule 49 (relational_expr)

    Conflict between rule 49 and token KW_AND resolved as shift (ROP_GREATER < KW_AND).
    Conflict between rule 49 and token KW_OR resolved as shift (ROP_GREATER < KW_OR).
    Conflict between rule 49 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATER).
    Conflict between rule 49 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATER).
    Conflict between rule 49 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATER).
    Conflict between rule 49 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATER).
    Conflict between rule 49 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATER).
    Conflict between rule 49 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATER).
    Conflict between rule 49 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 49 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 49 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATER).
    Conflict between rule 49 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 49 and token ROP_GREATER resolved as reduce (%left ROP_GREATER).
    Conflict between rule 49 and token ROP_GREATEREQUALS resolved as shift (ROP_GREATER < ROP_GREATEREQUALS).


State 109

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   50                | expr ROP_GREATEREQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr

    KW_AND  shift, and go to state 69
    KW_OR   shift, and go to state 70

    $default  reduce using rule 50 (relational_expr)

    Conflict between rule 50 and token KW_AND resolved as shift (ROP_GREATEREQUALS < KW_AND).
    Conflict between rule 50 and token KW_OR resolved as shift (ROP_GREATEREQUALS < KW_OR).
    Conflict between rule 50 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATEREQUALS).
    Conflict between rule 50 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATEREQUALS).
    Conflict between rule 50 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATEREQUALS).
    Conflict between rule 50 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_GREATER resolved as reduce (ROP_GREATER < ROP_GREATEREQUALS).
    Conflict between rule 50 and token ROP_GREATEREQUALS resolved as reduce (%left ROP_GREATEREQUALS).


State 110

   28 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 135


State 111

   61 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type
   62       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type DEL_COMMA params

    DEL_COLON  shift, and go to state 136


State 112

   59 params: TK_IDENTIFIER DEL_COLON basic_data_type •  [DEL_RPAR]
   60       | TK_IDENTIFIER DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 137

    $default  reduce using rule 59 (params)


State 113

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 138


State 114

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   63 func_body: ε •  [KW_ENDDEF]
   64          | • variable_declaration func_body
   65          | • statements func_body
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 63 (func_body)

    variable_declaration     go to state 120
    identifier               go to state 10
    func_body                go to state 139
    statements               go to state 122
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 115

   12 variable_declaration: TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   77 assign_statement: TK_IDENTIFIER • AOP_ASSIGN expr DEL_SMCOLON
   78                 | TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   80                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   81                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
   88 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   92 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    AOP_ASSIGN       shift, and go to state 140
    AOP_PLUSASSIGN   shift, and go to state 141
    AOP_MINASSIGN    shift, and go to state 142
    AOP_MULASSIGN    shift, and go to state 143
    AOP_DIVASSIGN    shift, and go to state 144
    AOP_MODASSIGN    shift, and go to state 145
    AOP_COLONASSIGN  shift, and go to state 146
    DEL_LPAR         shift, and go to state 147
    DEL_LBRACKET     shift, and go to state 14

    $default  reduce using rule 19 (identifier)


State 116

   83 if_statement: KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 148


State 117

   86 for_statement: KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 149


State 118

   85 while_statement: KW_WHILE • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_LPAR  shift, and go to state 150


State 119

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   90 return_statement: KW_RETURN • DEL_SMCOLON
   91                 | KW_RETURN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_SMCOLON    shift, and go to state 151
    DEL_LPAR       shift, and go to state 48

    expr                go to state 152
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 120

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   63 func_body: ε •  [KW_ENDDEF]
   64          | • variable_declaration func_body
   64          | variable_declaration • func_body
   65          | • statements func_body
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 63 (func_body)

    variable_declaration     go to state 120
    identifier               go to state 10
    func_body                go to state 153
    statements               go to state 122
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 121

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 154


State 122

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   63 func_body: ε •  [KW_ENDDEF]
   64          | • variable_declaration func_body
   65          | • statements func_body
   65          | statements • func_body
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 63 (func_body)

    variable_declaration     go to state 120
    identifier               go to state 10
    func_body                go to state 155
    statements               go to state 122
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 123

   68 statements: assign_statement •

    $default  reduce using rule 68 (statements)


State 124

   66 statements: if_statement •

    $default  reduce using rule 66 (statements)


State 125

   67 statements: while_statement •

    $default  reduce using rule 67 (statements)


State 126

   69 statements: for_statement •

    $default  reduce using rule 69 (statements)


State 127

   70 statements: array_int_comprehension •

    $default  reduce using rule 70 (statements)


State 128

   71 statements: array_comprehension •

    $default  reduce using rule 71 (statements)


State 129

   72 statements: return_statement •

    $default  reduce using rule 72 (statements)


State 130

   73 statements: function_statement •

    $default  reduce using rule 73 (statements)


State 131

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON •

    $default  reduce using rule 21 (comp)


State 132

   27 comp_identifiers: comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 156


State 133

   24 comp_field: comp_identifiers DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 157


State 134

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 12 (variable_declaration)


State 135

   28 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 28 (const)


State 136

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   61 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type
   62       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 158


State 137

   58 params: ε •  [DEL_RPAR]
   59       | • TK_IDENTIFIER DEL_COLON basic_data_type
   60       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   60       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA • params
   61       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   62       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 58 (params)

    params  go to state 159


State 138

   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 160


State 139

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 161


State 140

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   77 assign_statement: TK_IDENTIFIER AOP_ASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 162
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 141

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   78 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 163
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 142

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   79 assign_statement: TK_IDENTIFIER AOP_MINASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 164
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 143

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   80 assign_statement: TK_IDENTIFIER AOP_MULASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 165
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 144

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   81 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 166
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 145

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   82 assign_statement: TK_IDENTIFIER AOP_MODASSIGN • expr DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 167
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 146

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 168


State 147

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   92 function_statement: TK_IDENTIFIER DEL_LPAR • DEL_RPAR DEL_SMCOLON
   93                   | TK_IDENTIFIER DEL_LPAR • function_arguments DEL_RPAR DEL_SMCOLON
   94 function_arguments: • expr
   95                   | • expr DEL_COMMA function_arguments

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48
    DEL_RPAR       shift, and go to state 169

    expr                go to state 170
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52
    function_arguments  go to state 171


State 148

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   83 if_statement: KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 172
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 149

   86 for_statement: KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_IN  shift, and go to state 173


State 150

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   85 while_statement: KW_WHILE DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 174
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 151

   90 return_statement: KW_RETURN DEL_SMCOLON •

    $default  reduce using rule 90 (return_statement)


State 152

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   91 return_statement: KW_RETURN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 175


State 153

   64 func_body: variable_declaration func_body •

    $default  reduce using rule 64 (func_body)


State 154

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 176


State 155

   65 func_body: statements func_body •

    $default  reduce using rule 65 (func_body)


State 156

   27 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER •

    $default  reduce using rule 27 (comp_identifiers)


State 157

   24 comp_field: comp_identifiers DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 24 (comp_field)


State 158

   61 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type •  [DEL_RPAR]
   62       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 177

    $default  reduce using rule 61 (params)


State 159

   60 params: TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 60 (params)


State 160

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   63 func_body: ε •  [KW_ENDDEF]
   64          | • variable_declaration func_body
   65          | • statements func_body
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 63 (func_body)

    variable_declaration     go to state 120
    identifier               go to state 10
    func_body                go to state 178
    statements               go to state 122
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 161

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 179


State 162

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   77 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 180


State 163

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   78 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 181


State 164

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   79 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 182


State 165

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   80 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 183


State 166

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   81 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 184


State 167

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   82 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_SMCOLON        shift, and go to state 185


State 168

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 186
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 169

   92 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 187


State 170

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   94 function_arguments: expr •  [DEL_RPAR]
   95                   | expr • DEL_COMMA function_arguments

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_COMMA          shift, and go to state 188

    $default  reduce using rule 94 (function_arguments)


State 171

   93 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments • DEL_RPAR DEL_SMCOLON

    DEL_RPAR  shift, and go to state 189


State 172

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   83 if_statement: KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_RPAR           shift, and go to state 190


State 173

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 191


State 174

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   85 while_statement: KW_WHILE DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_RPAR           shift, and go to state 192


State 175

   91 return_statement: KW_RETURN expr DEL_SMCOLON •

    $default  reduce using rule 91 (return_statement)


State 176

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 10 (main_func)


State 177

   58 params: ε •  [DEL_RPAR]
   59       | • TK_IDENTIFIER DEL_COLON basic_data_type
   60       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   61       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   62       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params
   62       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA • params

    TK_IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 58 (params)

    params  go to state 193


State 178

   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 194


State 179

   56 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 56 (function)


State 180

   77 assign_statement: TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 77 (assign_statement)


State 181

   78 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 78 (assign_statement)


State 182

   79 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 79 (assign_statement)


State 183

   80 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 80 (assign_statement)


State 184

   81 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 81 (assign_statement)


State 185

   82 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 82 (assign_statement)


State 186

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_FOR             shift, and go to state 195
    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82


State 187

   92 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON •

    $default  reduce using rule 92 (function_statement)


State 188

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   94 function_arguments: • expr
   95                   | • expr DEL_COMMA function_arguments
   95                   | expr DEL_COMMA • function_arguments

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 170
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52
    function_arguments  go to state 196


State 189

   93 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 197


State 190

   83 if_statement: KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 198


State 191

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 199
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 192

   85 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_COLON  shift, and go to state 200


State 193

   62 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 62 (params)


State 194

   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 201


State 195

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 202


State 196

   95 function_arguments: expr DEL_COMMA function_arguments •

    $default  reduce using rule 95 (function_arguments)


State 197

   93 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON •

    $default  reduce using rule 93 (function_statement)


State 198

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ELSE, KW_ENDIF]
   75               | • variable_declaration statement_body
   76               | • statements statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   83             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 205
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 199

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_COLON          shift, and go to state 206


State 200

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ENDWHILE]
   75               | • variable_declaration statement_body
   76               | • statements statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   85                | KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 207
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 201

   57 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 57 (function)


State 202

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 208


State 203

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   75               | • variable_declaration statement_body
   75               | variable_declaration • statement_body
   76               | • statements statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 209
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 204

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   75               | • variable_declaration statement_body
   76               | • statements statement_body
   76               | statements • statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 210
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 205

   83 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_ELSE   shift, and go to state 211
    KW_ENDIF  shift, and go to state 212


State 206

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 213
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 207

   85 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDWHILE DEL_SMCOLON

    KW_ENDWHILE  shift, and go to state 214


State 208

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 215
    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 216
    types            go to state 217


State 209

   75 statement_body: variable_declaration statement_body •

    $default  reduce using rule 75 (statement_body)


State 210

   76 statement_body: statements statement_body •

    $default  reduce using rule 76 (statement_body)


State 211

   84 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE • DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 218


State 212

   83 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 219


State 213

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_RBRACKET       shift, and go to state 220
    DEL_COLON          shift, and go to state 221


State 214

   85 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 222


State 215

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 223


State 216

   18 types: basic_data_type •

    $default  reduce using rule 18 (types)


State 217

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types • KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_IN  shift, and go to state 224


State 218

   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   84             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON • statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 225
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    statements               go to state 226
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 219

   83 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 83 (if_statement)


State 220

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 227


State 221

   29 expr: • TK_IDENTIFIER
   30     | • TK_STRING
   31     | • KW_TRUE
   32     | • KW_FALSE
   33     | • DEL_LPAR expr DEL_RPAR
   34     | • arithmetic_expr
   35     | • relational_expr
   36     | • logical_statements
   37 arithmetic_expr: • TK_INTEGER
   38                | • TK_REAL
   39                | • expr OP_POWER expr
   40                | • expr OP_MULT expr
   41                | • expr OP_DIV expr
   42                | • expr OP_MOD expr
   43                | • expr OP_PLUS expr
   44                | • expr OP_MINUS expr
   45                | • OP_PLUS expr
   46                | • OP_MINUS expr
   47 relational_expr: • expr ROP_LESS expr
   48                | • expr ROP_LESSEQUALS expr
   49                | • expr ROP_GREATER expr
   50                | • expr ROP_GREATEREQUALS expr
   51                | • expr ROP_EQUALS expr
   52                | • expr ROP_NOTEQUALS expr
   53 logical_statements: • KW_NOT expr
   54                   | • expr KW_AND expr
   55                   | • expr KW_OR expr
   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 39
    TK_INTEGER     shift, and go to state 40
    TK_REAL        shift, and go to state 41
    TK_STRING      shift, and go to state 42
    KW_TRUE        shift, and go to state 43
    KW_FALSE       shift, and go to state 44
    KW_NOT         shift, and go to state 45
    OP_PLUS        shift, and go to state 46
    OP_MINUS       shift, and go to state 47
    DEL_LPAR       shift, and go to state 48

    expr                go to state 228
    arithmetic_expr     go to state 50
    relational_expr     go to state 51
    logical_statements  go to state 52


State 222

   85 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON •

    $default  reduce using rule 85 (while_statement)


State 223

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 229


State 224

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN • TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 230


State 225

   77 assign_statement: TK_IDENTIFIER • AOP_ASSIGN expr DEL_SMCOLON
   78                 | TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   80                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   81                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
   88 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   92 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    AOP_ASSIGN       shift, and go to state 140
    AOP_PLUSASSIGN   shift, and go to state 141
    AOP_MINASSIGN    shift, and go to state 142
    AOP_MULASSIGN    shift, and go to state 143
    AOP_DIVASSIGN    shift, and go to state 144
    AOP_MODASSIGN    shift, and go to state 145
    AOP_COLONASSIGN  shift, and go to state 146
    DEL_LPAR         shift, and go to state 147


State 226

   84 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements • KW_ENDIF DEL_SMCOLON

    KW_ENDIF  shift, and go to state 231


State 227

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ENDFOR]
   75               | • variable_declaration statement_body
   76               | • statements statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   86              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 232
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 228

   39 arithmetic_expr: expr • OP_POWER expr
   40                | expr • OP_MULT expr
   41                | expr • OP_DIV expr
   42                | expr • OP_MOD expr
   43                | expr • OP_PLUS expr
   44                | expr • OP_MINUS expr
   47 relational_expr: expr • ROP_LESS expr
   48                | expr • ROP_LESSEQUALS expr
   49                | expr • ROP_GREATER expr
   50                | expr • ROP_GREATEREQUALS expr
   51                | expr • ROP_EQUALS expr
   52                | expr • ROP_NOTEQUALS expr
   54 logical_statements: expr • KW_AND expr
   55                   | expr • KW_OR expr
   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 69
    KW_OR              shift, and go to state 70
    OP_PLUS            shift, and go to state 71
    OP_MINUS           shift, and go to state 72
    OP_MULT            shift, and go to state 73
    OP_DIV             shift, and go to state 74
    OP_MOD             shift, and go to state 75
    OP_POWER           shift, and go to state 76
    ROP_EQUALS         shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 78
    ROP_LESS           shift, and go to state 79
    ROP_LESSEQUALS     shift, and go to state 80
    ROP_GREATER        shift, and go to state 81
    ROP_GREATEREQUALS  shift, and go to state 82
    DEL_RBRACKET       shift, and go to state 233


State 229

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 216
    types            go to state 234


State 230

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER • KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_OF  shift, and go to state 235


State 231

   84 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 236


State 232

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 237


State 233

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 238


State 234

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 239


State 235

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 240


State 236

   84 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 84 (if_statement)


State 237

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 241


State 238

   11 variable_declaration: • identifier DEL_COLON basic_data_type DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   66 statements: • if_statement
   67           | • while_statement
   68           | • assign_statement
   69           | • for_statement
   70           | • array_int_comprehension
   71           | • array_comprehension
   72           | • return_statement
   73           | • function_statement
   74 statement_body: ε •  [KW_ENDFOR]
   75               | • variable_declaration statement_body
   76               | • statements statement_body
   77 assign_statement: • TK_IDENTIFIER AOP_ASSIGN expr DEL_SMCOLON
   78                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   79                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   80                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   81                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   82                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   83 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   84             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   85 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   86 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   87              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
   88 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   89 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   90 return_statement: • KW_RETURN DEL_SMCOLON
   91                 | • KW_RETURN expr DEL_SMCOLON
   92 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR DEL_SMCOLON
   93                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 115
    KW_IF          shift, and go to state 116
    KW_FOR         shift, and go to state 117
    KW_WHILE       shift, and go to state 118
    KW_RETURN      shift, and go to state 119

    $default  reduce using rule 74 (statement_body)

    variable_declaration     go to state 203
    identifier               go to state 10
    statements               go to state 204
    statement_body           go to state 242
    assign_statement         go to state 123
    if_statement             go to state 124
    while_statement          go to state 125
    for_statement            go to state 126
    array_int_comprehension  go to state 127
    array_comprehension      go to state 128
    return_statement         go to state 129
    function_statement       go to state 130


State 239

   88 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 88 (array_int_comprehension)


State 240

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 243


State 241

   86 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 86 (for_statement)


State 242

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 244


State 243

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 245


State 244

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 246


State 245

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 216
    types            go to state 247


State 246

   87 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 87 (for_statement)


State 247

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 248


State 248

   89 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 89 (array_comprehension)
