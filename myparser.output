Terminals unused in grammar

    DEL_DOT


Grammar

    0 $accept: input $end

    1 input: ε
    2      | declarations main_func
    3      | main_func

    4 declarations: declarations declaration
    5             | declaration

    6 declaration: variable_declaration
    7            | comp
    8            | const
    9            | function

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON
   12                     | TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON

   14 basic_data_type: KW_INT
   15                | KW_SCALAR
   16                | KW_STR
   17                | KW_BOOLEAN

   18 types: basic_data_type

   19 identifier: TK_IDENTIFIER
   20           | identifier DEL_COMMA TK_IDENTIFIER

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

   22 comp_body: comp_field
   23          | comp_field comp_body

   24 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON
   25           | comp_function

   26 comp_identifiers: HASH TK_IDENTIFIER
   27                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   30 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

   31 expr: identifier_expr
   32     | TK_STRING
   33     | KW_TRUE
   34     | KW_FALSE
   35     | DEL_LPAR expr DEL_RPAR
   36     | arithmetic_expr
   37     | relational_expr
   38     | logical_statements
   39     | function_statement

   40 arithmetic_expr: TK_INTEGER
   41                | TK_REAL
   42                | expr OP_POWER expr
   43                | expr OP_MULT expr
   44                | expr OP_DIV expr
   45                | expr OP_MOD expr
   46                | expr OP_PLUS expr
   47                | expr OP_MINUS expr
   48                | OP_PLUS expr
   49                | OP_MINUS expr

   50 identifier_expr: TK_IDENTIFIER
   51                | HASH TK_IDENTIFIER
   52                | TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET

   54 relational_expr: expr ROP_LESS expr
   55                | expr ROP_LESSEQUALS expr
   56                | expr ROP_GREATER expr
   57                | expr ROP_GREATEREQUALS expr
   58                | expr ROP_EQUALS expr
   59                | expr ROP_NOTEQUALS expr

   60 logical_statements: KW_NOT expr
   61                   | expr KW_AND expr
   62                   | expr KW_OR expr

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   65 params: ε
   66       | TK_IDENTIFIER DEL_COLON basic_data_type
   67       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   68       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

   70 func_body: ε
   71          | variable_declaration func_body
   72          | const func_body
   73          | statements func_body

   74 statements: if_statement
   75           | while_statement
   76           | assign_statement
   77           | for_statement
   78           | array_int_comprehension
   79           | array_comprehension
   80           | return_statement
   81           | break_statement
   82           | continue_statement
   83           | function_statement DEL_SMCOLON

   84 statement_body: ε
   85               | variable_declaration statement_body
   86               | const statement_body
   87               | statements statement_body

   88 assign_statement: identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON

   94 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

   96 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  101 break_statement: KW_BREAK DEL_SMCOLON

  102 continue_statement: KW_CONTINUE DEL_SMCOLON

  103 return_statement: KW_RETURN DEL_SMCOLON
  104                 | KW_RETURN expr DEL_SMCOLON

  105 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

  107 function_arguments: expr
  108                   | expr DEL_COMMA function_arguments


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TK_IDENTIFIER <str> (258) 12 13 19 20 21 26 27 28 29 50 51 52 53 63 64 66 67 68 69 89 90 91 92 93 97 98 99 100 105 106
    TK_INTEGER <str> (259) 12 40 53 99 100
    TK_REAL <str> (260) 41
    TK_STRING <str> (261) 32
    KW_INT (262) 14
    KW_SCALAR (263) 15
    KW_STR (264) 16
    KW_BOOLEAN (265) 17
    KW_TRUE (266) 33
    KW_FALSE (267) 34
    KW_CONST (268) 30
    KW_IF (269) 94 95
    KW_ELSE (270) 95
    KW_ENDIF (271) 94 95
    KW_FOR (272) 97 98 99 100
    KW_IN (273) 97 98 100
    KW_ENDFOR (274) 97 98
    KW_WHILE (275) 96
    KW_ENDWHILE (276) 96
    KW_BREAK (277) 101
    KW_CONTINUE (278) 102
    KW_NOT (279) 60
    KW_AND (280) 61
    KW_OR (281) 62
    KW_DEF (282) 10 28 29 63 64
    KW_ENDDEF (283) 10 28 29 63 64
    KW_MAIN (284) 10
    KW_RETURN (285) 103 104
    KW_COMP (286) 21
    KW_ENDCOMP (287) 21
    KW_OF (288) 100
    OP_PLUS (289) 46 48
    OP_MINUS (290) 47 49
    OP_MULT (291) 43
    OP_DIV (292) 44
    OP_MOD (293) 45
    OP_POWER (294) 42
    ROP_EQUALS (295) 58
    ROP_NOTEQUALS (296) 59
    ROP_LESS (297) 54
    ROP_LESSEQUALS (298) 55
    ROP_GREATER (299) 56
    ROP_GREATEREQUALS (300) 57
    AOP_ASSIGN (301) 30 88
    AOP_PLUSASSIGN (302) 89
    AOP_MINASSIGN (303) 90
    AOP_MULASSIGN (304) 91
    AOP_DIVASSIGN (305) 92
    AOP_MODASSIGN (306) 93
    AOP_COLONASSIGN (307) 99 100
    AOP_ARROW (308) 29 64
    DEL_SMCOLON (309) 10 11 12 13 21 24 28 29 30 63 64 83 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104
    DEL_LPAR (310) 10 28 29 35 63 64 94 95 96 105 106
    DEL_RPAR (311) 10 28 29 35 63 64 94 95 96 105 106
    DEL_COMMA (312) 20 27 67 69 108
    DEL_LBRACKET (313) 12 13 52 53 68 69 97 98 99 100
    DEL_RBRACKET (314) 12 13 52 53 68 69 97 98 99 100
    DEL_COLON (315) 10 11 12 13 21 24 28 29 30 63 64 66 67 68 69 94 95 96 97 98 99 100
    DEL_DOT (316)
    HASH (317) 26 27 51


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    input (64)
        on left: 1 2 3
        on right: 0
    declarations <str> (65)
        on left: 4 5
        on right: 2 4
    declaration <str> (66)
        on left: 6 7 8 9
        on right: 4 5
    main_func <str> (67)
        on left: 10
        on right: 2 3
    variable_declaration <str> (68)
        on left: 11 12 13
        on right: 6 71 85
    basic_data_type <str> (69)
        on left: 14 15 16 17
        on right: 18 30 64 66 67 68 69
    types <str> (70)
        on left: 18
        on right: 11 12 13 24 29 99 100
    identifier <str> (71)
        on left: 19 20
        on right: 11 20 30
    comp <str> (72)
        on left: 21
        on right: 7
    comp_body <str> (73)
        on left: 22 23
        on right: 21 23
    comp_field <str> (74)
        on left: 24 25
        on right: 22 23
    comp_identifiers <str> (75)
        on left: 26 27
        on right: 24 27
    comp_function <str> (76)
        on left: 28 29
        on right: 25
    const <str> (77)
        on left: 30
        on right: 8 72 86
    expr <str> (78)
        on left: 31 32 33 34 35 36 37 38 39
        on right: 30 35 42 43 44 45 46 47 48 49 54 55 56 57 58 59 60 61 62 88 89 90 91 92 93 94 95 96 97 98 99 100 104 107 108
    arithmetic_expr <str> (79)
        on left: 40 41 42 43 44 45 46 47 48 49
        on right: 36
    identifier_expr <str> (80)
        on left: 50 51 52 53
        on right: 31 88
    relational_expr <str> (81)
        on left: 54 55 56 57 58 59
        on right: 37
    logical_statements <str> (82)
        on left: 60 61 62
        on right: 38
    function <str> (83)
        on left: 63 64
        on right: 9
    params <str> (84)
        on left: 65 66 67 68 69
        on right: 28 29 63 64 67 69
    func_body <str> (85)
        on left: 70 71 72 73
        on right: 10 28 29 63 64 71 72 73
    statements <str> (86)
        on left: 74 75 76 77 78 79 80 81 82 83
        on right: 73 87 95
    statement_body <str> (87)
        on left: 84 85 86 87
        on right: 85 86 87 94 95 96 97 98
    assign_statement <str> (88)
        on left: 88 89 90 91 92 93
        on right: 76
    if_statement <str> (89)
        on left: 94 95
        on right: 74
    while_statement <str> (90)
        on left: 96
        on right: 75
    for_statement <str> (91)
        on left: 97 98
        on right: 77
    array_int_comprehension <str> (92)
        on left: 99
        on right: 78
    array_comprehension <str> (93)
        on left: 100
        on right: 79
    break_statement <str> (94)
        on left: 101
        on right: 81
    continue_statement <str> (95)
        on left: 102
        on right: 82
    return_statement <str> (96)
        on left: 103 104
        on right: 80
    function_statement <str> (97)
        on left: 105 106
        on right: 39 83
    function_arguments <str> (98)
        on left: 107 108
        on right: 106 108


State 0

    0 $accept: • input $end
    1 input: ε •  [$end]
    2      | • declarations main_func
    3      | • main_func
    4 declarations: • declarations declaration
    5             | • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   63 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    $default  reduce using rule 1 (input)

    input                 go to state 5
    declarations          go to state 6
    declaration           go to state 7
    main_func             go to state 8
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 1

   12 variable_declaration: TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]

    DEL_LBRACKET  shift, and go to state 14

    $default  reduce using rule 19 (identifier)


State 2

   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: KW_CONST • identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 15

    identifier  go to state 16


State 3

   10 main_func: KW_DEF • KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   63 function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 17
    KW_MAIN        shift, and go to state 18


State 4

   21 comp: KW_COMP • TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 19


State 5

    0 $accept: input • $end

    $end  shift, and go to state 20


State 6

    2 input: declarations • main_func
    4 declarations: declarations • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   63 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4

    declaration           go to state 21
    main_func             go to state 22
    variable_declaration  go to state 9
    identifier            go to state 10
    comp                  go to state 11
    const                 go to state 12
    function              go to state 13


State 7

    5 declarations: declaration •

    $default  reduce using rule 5 (declarations)


State 8

    3 input: main_func •

    $default  reduce using rule 3 (input)


State 9

    6 declaration: variable_declaration •

    $default  reduce using rule 6 (declaration)


State 10

   11 variable_declaration: identifier • DEL_COLON types DEL_SMCOLON
   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER

    DEL_COMMA  shift, and go to state 23
    DEL_COLON  shift, and go to state 24


State 11

    7 declaration: comp •

    $default  reduce using rule 7 (declaration)


State 12

    8 declaration: const •

    $default  reduce using rule 8 (declaration)


State 13

    9 declaration: function •

    $default  reduce using rule 9 (declaration)


State 14

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER    shift, and go to state 25
    DEL_RBRACKET  shift, and go to state 26


State 15

   19 identifier: TK_IDENTIFIER •

    $default  reduce using rule 19 (identifier)


State 16

   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   30 const: KW_CONST identifier • AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    AOP_ASSIGN  shift, and go to state 27
    DEL_COMMA   shift, and go to state 23


State 17

   63 function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 28


State 18

   10 main_func: KW_DEF KW_MAIN • DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 29


State 19

   21 comp: KW_COMP TK_IDENTIFIER • DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    DEL_COLON  shift, and go to state 30


State 20

    0 $accept: input $end •

    $default  accept


State 21

    4 declarations: declarations declaration •

    $default  reduce using rule 4 (declarations)


State 22

    2 input: declarations main_func •

    $default  reduce using rule 2 (input)


State 23

   20 identifier: identifier DEL_COMMA • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 31


State 24

   11 variable_declaration: identifier DEL_COLON • types DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 37


State 25

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 38


State 26

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 39


State 27

   30 const: KW_CONST identifier AOP_ASSIGN • expr DEL_COLON basic_data_type DEL_SMCOLON
   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 51
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 28

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   65 params: ε •  [DEL_RPAR]
   66       | • TK_IDENTIFIER DEL_COLON basic_data_type
   67       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   68       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 57

    $default  reduce using rule 65 (params)

    params  go to state 58


State 29

   10 main_func: KW_DEF KW_MAIN DEL_LPAR • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 59


State 30

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON • comp_body KW_ENDCOMP DEL_SMCOLON
   22 comp_body: • comp_field
   23          | • comp_field comp_body
   24 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   25           | • comp_function
   26 comp_identifiers: • HASH TK_IDENTIFIER
   27                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   28 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 60
    HASH    shift, and go to state 61

    comp_body         go to state 62
    comp_field        go to state 63
    comp_identifiers  go to state 64
    comp_function     go to state 65


State 31

   20 identifier: identifier DEL_COMMA TK_IDENTIFIER •

    $default  reduce using rule 20 (identifier)


State 32

   14 basic_data_type: KW_INT •

    $default  reduce using rule 14 (basic_data_type)


State 33

   15 basic_data_type: KW_SCALAR •

    $default  reduce using rule 15 (basic_data_type)


State 34

   16 basic_data_type: KW_STR •

    $default  reduce using rule 16 (basic_data_type)


State 35

   17 basic_data_type: KW_BOOLEAN •

    $default  reduce using rule 17 (basic_data_type)


State 36

   18 types: basic_data_type •

    $default  reduce using rule 18 (types)


State 37

   11 variable_declaration: identifier DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 66


State 38

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 67


State 39

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • types DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 68


State 40

   50 identifier_expr: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   52                | TK_IDENTIFIER • DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
  105 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  106                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    DEL_LPAR      shift, and go to state 69
    DEL_LBRACKET  shift, and go to state 70

    $default  reduce using rule 50 (identifier_expr)


State 41

   40 arithmetic_expr: TK_INTEGER •

    $default  reduce using rule 40 (arithmetic_expr)


State 42

   41 arithmetic_expr: TK_REAL •

    $default  reduce using rule 41 (arithmetic_expr)


State 43

   32 expr: TK_STRING •

    $default  reduce using rule 32 (expr)


State 44

   33 expr: KW_TRUE •

    $default  reduce using rule 33 (expr)


State 45

   34 expr: KW_FALSE •

    $default  reduce using rule 34 (expr)


State 46

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   60                   | KW_NOT • expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 71
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 47

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   48                | OP_PLUS • expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 72
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 48

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   49                | OP_MINUS • expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 73
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 49

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   35     | DEL_LPAR • expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 74
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 50

   51 identifier_expr: HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 75


State 51

   30 const: KW_CONST identifier AOP_ASSIGN expr • DEL_COLON basic_data_type DEL_SMCOLON
   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_COLON          shift, and go to state 90


State 52

   36 expr: arithmetic_expr •

    $default  reduce using rule 36 (expr)


State 53

   31 expr: identifier_expr •

    $default  reduce using rule 31 (expr)


State 54

   37 expr: relational_expr •

    $default  reduce using rule 37 (expr)


State 55

   38 expr: logical_statements •

    $default  reduce using rule 38 (expr)


State 56

   39 expr: function_statement •

    $default  reduce using rule 39 (expr)


State 57

   66 params: TK_IDENTIFIER • DEL_COLON basic_data_type
   67       | TK_IDENTIFIER • DEL_COLON basic_data_type DEL_COMMA params
   68       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_LBRACKET  shift, and go to state 91
    DEL_COLON     shift, and go to state 92


State 58

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 93


State 59

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 94


State 60

   28 comp_function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 95


State 61

   26 comp_identifiers: HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 96


State 62

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body • KW_ENDCOMP DEL_SMCOLON

    KW_ENDCOMP  shift, and go to state 97


State 63

   22 comp_body: • comp_field
   22          | comp_field •  [KW_ENDCOMP]
   23          | • comp_field comp_body
   23          | comp_field • comp_body
   24 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   25           | • comp_function
   26 comp_identifiers: • HASH TK_IDENTIFIER
   27                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   28 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 60
    HASH    shift, and go to state 61

    $default  reduce using rule 22 (comp_body)

    comp_body         go to state 98
    comp_field        go to state 63
    comp_identifiers  go to state 64
    comp_function     go to state 65


State 64

   24 comp_field: comp_identifiers • DEL_COLON types DEL_SMCOLON
   27 comp_identifiers: comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER

    DEL_COMMA  shift, and go to state 99
    DEL_COLON  shift, and go to state 100


State 65

   25 comp_field: comp_function •

    $default  reduce using rule 25 (comp_field)


State 66

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 11 (variable_declaration)


State 67

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON
   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 101


State 68

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 102


State 69

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  105                   | TK_IDENTIFIER DEL_LPAR • DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  106                   | TK_IDENTIFIER DEL_LPAR • function_arguments DEL_RPAR
  107 function_arguments: • expr
  108                   | • expr DEL_COMMA function_arguments

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    DEL_RPAR       shift, and go to state 103
    HASH           shift, and go to state 50

    expr                go to state 104
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56
    function_arguments  go to state 105


State 70

   52 identifier_expr: TK_IDENTIFIER DEL_LBRACKET • TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 106
    TK_INTEGER     shift, and go to state 107


State 71

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   60 logical_statements: KW_NOT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   61                   | expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND  shift, and go to state 76
    KW_OR   shift, and go to state 77

    $default  reduce using rule 60 (logical_statements)

    Conflict between rule 60 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 60 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 60 and token OP_PLUS resolved as reduce (OP_PLUS < KW_NOT).
    Conflict between rule 60 and token OP_MINUS resolved as reduce (OP_MINUS < KW_NOT).
    Conflict between rule 60 and token OP_MULT resolved as reduce (OP_MULT < KW_NOT).
    Conflict between rule 60 and token OP_DIV resolved as reduce (OP_DIV < KW_NOT).
    Conflict between rule 60 and token OP_MOD resolved as reduce (OP_MOD < KW_NOT).
    Conflict between rule 60 and token OP_POWER resolved as reduce (OP_POWER < KW_NOT).
    Conflict between rule 60 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_NOT).
    Conflict between rule 60 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_NOT).
    Conflict between rule 60 and token ROP_LESS resolved as reduce (ROP_LESS < KW_NOT).
    Conflict between rule 60 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_NOT).
    Conflict between rule 60 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_NOT).
    Conflict between rule 60 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_NOT).


State 72

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   48                | OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 48 (arithmetic_expr)

    Conflict between rule 48 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 48 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 48 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 48 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 48 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 48 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 48 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 48 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 48 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 48 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 48 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 48 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 48 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 73

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   49                | OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 49 (arithmetic_expr)

    Conflict between rule 49 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 49 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 49 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 49 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 49 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 49 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 49 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 49 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 49 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 49 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 49 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 49 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 49 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 49 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 74

   35 expr: DEL_LPAR expr • DEL_RPAR
   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_RPAR           shift, and go to state 108


State 75

   51 identifier_expr: HASH TK_IDENTIFIER •

    $default  reduce using rule 51 (identifier_expr)


State 76

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   61                   | expr KW_AND • expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 109
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 77

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   62                   | expr KW_OR • expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 110
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 78

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   46                | expr OP_PLUS • expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 111
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 79

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   47                | expr OP_MINUS • expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 112
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 80

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   43                | expr OP_MULT • expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 113
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 81

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   44                | expr OP_DIV • expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 114
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 82

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   45                | expr OP_MOD • expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 115
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 83

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   42                | expr OP_POWER • expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 116
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 84

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   58                | expr ROP_EQUALS • expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 117
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 85

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   59                | expr ROP_NOTEQUALS • expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 118
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 86

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   54                | expr ROP_LESS • expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 119
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 87

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   55                | expr ROP_LESSEQUALS • expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 120
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 88

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   56                | expr ROP_GREATER • expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 121
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 89

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   57                | expr ROP_GREATEREQUALS • expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 122
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 90

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   30 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON • basic_data_type DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 123


State 91

   68 params: TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type
   69       | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    DEL_RBRACKET  shift, and go to state 124


State 92

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   66 params: TK_IDENTIFIER DEL_COLON • basic_data_type
   67       | TK_IDENTIFIER DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 125


State 93

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   64         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 126
    DEL_COLON  shift, and go to state 127


State 94

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 138
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 95

   28 comp_function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 150


State 96

   26 comp_identifiers: HASH TK_IDENTIFIER •

    $default  reduce using rule 26 (comp_identifiers)


State 97

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 151


State 98

   23 comp_body: comp_field comp_body •

    $default  reduce using rule 23 (comp_body)


State 99

   27 comp_identifiers: comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER

    HASH  shift, and go to state 152


State 100

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   24 comp_field: comp_identifiers DEL_COLON • types DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 153


State 101

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 154


State 102

   13 variable_declaration: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 13 (variable_declaration)


State 103

  105 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR •

    $default  reduce using rule 105 (function_statement)


State 104

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
  107 function_arguments: expr •  [DEL_RPAR]
  108                   | expr • DEL_COMMA function_arguments

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_COMMA          shift, and go to state 155

    $default  reduce using rule 107 (function_arguments)


State 105

  106 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments • DEL_RPAR

    DEL_RPAR  shift, and go to state 156


State 106

   52 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 157


State 107

   53 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 158


State 108

   35 expr: DEL_LPAR expr DEL_RPAR •

    $default  reduce using rule 35 (expr)


State 109

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   61                   | expr KW_AND expr •  [KW_FOR, KW_AND, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   62                   | expr • KW_OR expr

    KW_OR  shift, and go to state 77

    $default  reduce using rule 61 (logical_statements)

    Conflict between rule 61 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 61 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 61 and token OP_PLUS resolved as reduce (OP_PLUS < KW_AND).
    Conflict between rule 61 and token OP_MINUS resolved as reduce (OP_MINUS < KW_AND).
    Conflict between rule 61 and token OP_MULT resolved as reduce (OP_MULT < KW_AND).
    Conflict between rule 61 and token OP_DIV resolved as reduce (OP_DIV < KW_AND).
    Conflict between rule 61 and token OP_MOD resolved as reduce (OP_MOD < KW_AND).
    Conflict between rule 61 and token OP_POWER resolved as reduce (OP_POWER < KW_AND).
    Conflict between rule 61 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_AND).
    Conflict between rule 61 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 61 and token ROP_LESS resolved as reduce (ROP_LESS < KW_AND).
    Conflict between rule 61 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 61 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_AND).
    Conflict between rule 61 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_AND).


State 110

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   62                   | expr KW_OR expr •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]

    $default  reduce using rule 62 (logical_statements)

    Conflict between rule 62 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 62 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (OP_PLUS < KW_OR).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (OP_MINUS < KW_OR).
    Conflict between rule 62 and token OP_MULT resolved as reduce (OP_MULT < KW_OR).
    Conflict between rule 62 and token OP_DIV resolved as reduce (OP_DIV < KW_OR).
    Conflict between rule 62 and token OP_MOD resolved as reduce (OP_MOD < KW_OR).
    Conflict between rule 62 and token OP_POWER resolved as reduce (OP_POWER < KW_OR).
    Conflict between rule 62 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_OR).
    Conflict between rule 62 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 62 and token ROP_LESS resolved as reduce (ROP_LESS < KW_OR).
    Conflict between rule 62 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 62 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_OR).
    Conflict between rule 62 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_OR).


State 111

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   46                | expr OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 46 (arithmetic_expr)

    Conflict between rule 46 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 46 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 46 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 46 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 46 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 46 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 46 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 46 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 46 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 46 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 46 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 46 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 46 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 46 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 112

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   47                | expr OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 47 (arithmetic_expr)

    Conflict between rule 47 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 47 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 47 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 47 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 47 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 47 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 47 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 47 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 47 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 47 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 47 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 47 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 47 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 47 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 113

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   43                | expr OP_MULT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 43 (arithmetic_expr)

    Conflict between rule 43 and token KW_AND resolved as shift (OP_MULT < KW_AND).
    Conflict between rule 43 and token KW_OR resolved as shift (OP_MULT < KW_OR).
    Conflict between rule 43 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 43 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 43 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 43 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 43 and token OP_MOD resolved as shift (OP_MULT < OP_MOD).
    Conflict between rule 43 and token OP_POWER resolved as shift (OP_MULT < OP_POWER).
    Conflict between rule 43 and token ROP_EQUALS resolved as shift (OP_MULT < ROP_EQUALS).
    Conflict between rule 43 and token ROP_NOTEQUALS resolved as shift (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 43 and token ROP_LESS resolved as shift (OP_MULT < ROP_LESS).
    Conflict between rule 43 and token ROP_LESSEQUALS resolved as shift (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 43 and token ROP_GREATER resolved as shift (OP_MULT < ROP_GREATER).
    Conflict between rule 43 and token ROP_GREATEREQUALS resolved as shift (OP_MULT < ROP_GREATEREQUALS).


State 114

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   44                | expr OP_DIV expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 44 (arithmetic_expr)

    Conflict between rule 44 and token KW_AND resolved as shift (OP_DIV < KW_AND).
    Conflict between rule 44 and token KW_OR resolved as shift (OP_DIV < KW_OR).
    Conflict between rule 44 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 44 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 44 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 44 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 44 and token OP_MOD resolved as shift (OP_DIV < OP_MOD).
    Conflict between rule 44 and token OP_POWER resolved as shift (OP_DIV < OP_POWER).
    Conflict between rule 44 and token ROP_EQUALS resolved as shift (OP_DIV < ROP_EQUALS).
    Conflict between rule 44 and token ROP_NOTEQUALS resolved as shift (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 44 and token ROP_LESS resolved as shift (OP_DIV < ROP_LESS).
    Conflict between rule 44 and token ROP_LESSEQUALS resolved as shift (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 44 and token ROP_GREATER resolved as shift (OP_DIV < ROP_GREATER).
    Conflict between rule 44 and token ROP_GREATEREQUALS resolved as shift (OP_DIV < ROP_GREATEREQUALS).


State 115

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   45                | expr OP_MOD expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 45 (arithmetic_expr)

    Conflict between rule 45 and token KW_AND resolved as shift (OP_MOD < KW_AND).
    Conflict between rule 45 and token KW_OR resolved as shift (OP_MOD < KW_OR).
    Conflict between rule 45 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 45 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 45 and token OP_MULT resolved as reduce (OP_MULT < OP_MOD).
    Conflict between rule 45 and token OP_DIV resolved as reduce (OP_DIV < OP_MOD).
    Conflict between rule 45 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 45 and token OP_POWER resolved as shift (OP_MOD < OP_POWER).
    Conflict between rule 45 and token ROP_EQUALS resolved as shift (OP_MOD < ROP_EQUALS).
    Conflict between rule 45 and token ROP_NOTEQUALS resolved as shift (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 45 and token ROP_LESS resolved as shift (OP_MOD < ROP_LESS).
    Conflict between rule 45 and token ROP_LESSEQUALS resolved as shift (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 45 and token ROP_GREATER resolved as shift (OP_MOD < ROP_GREATER).
    Conflict between rule 45 and token ROP_GREATEREQUALS resolved as shift (OP_MOD < ROP_GREATEREQUALS).


State 116

   42 arithmetic_expr: expr • OP_POWER expr
   42                | expr OP_POWER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 42 (arithmetic_expr)

    Conflict between rule 42 and token KW_AND resolved as shift (OP_POWER < KW_AND).
    Conflict between rule 42 and token KW_OR resolved as shift (OP_POWER < KW_OR).
    Conflict between rule 42 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POWER).
    Conflict between rule 42 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POWER).
    Conflict between rule 42 and token OP_MULT resolved as reduce (OP_MULT < OP_POWER).
    Conflict between rule 42 and token OP_DIV resolved as reduce (OP_DIV < OP_POWER).
    Conflict between rule 42 and token OP_MOD resolved as reduce (OP_MOD < OP_POWER).
    Conflict between rule 42 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 42 and token ROP_EQUALS resolved as shift (OP_POWER < ROP_EQUALS).
    Conflict between rule 42 and token ROP_NOTEQUALS resolved as shift (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 42 and token ROP_LESS resolved as shift (OP_POWER < ROP_LESS).
    Conflict between rule 42 and token ROP_LESSEQUALS resolved as shift (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 42 and token ROP_GREATER resolved as shift (OP_POWER < ROP_GREATER).
    Conflict between rule 42 and token ROP_GREATEREQUALS resolved as shift (OP_POWER < ROP_GREATEREQUALS).


State 117

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   58                | expr ROP_EQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 58 (relational_expr)

    Conflict between rule 58 and token KW_AND resolved as shift (ROP_EQUALS < KW_AND).
    Conflict between rule 58 and token KW_OR resolved as shift (ROP_EQUALS < KW_OR).
    Conflict between rule 58 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_EQUALS).
    Conflict between rule 58 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_EQUALS).
    Conflict between rule 58 and token OP_MULT resolved as reduce (OP_MULT < ROP_EQUALS).
    Conflict between rule 58 and token OP_DIV resolved as reduce (OP_DIV < ROP_EQUALS).
    Conflict between rule 58 and token OP_MOD resolved as reduce (OP_MOD < ROP_EQUALS).
    Conflict between rule 58 and token OP_POWER resolved as reduce (OP_POWER < ROP_EQUALS).
    Conflict between rule 58 and token ROP_EQUALS resolved as reduce (%left ROP_EQUALS).
    Conflict between rule 58 and token ROP_NOTEQUALS resolved as shift (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 58 and token ROP_LESS resolved as shift (ROP_EQUALS < ROP_LESS).
    Conflict between rule 58 and token ROP_LESSEQUALS resolved as shift (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 58 and token ROP_GREATER resolved as shift (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 58 and token ROP_GREATEREQUALS resolved as shift (ROP_EQUALS < ROP_GREATEREQUALS).


State 118

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   59                | expr ROP_NOTEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 59 (relational_expr)

    Conflict between rule 59 and token KW_AND resolved as shift (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 59 and token KW_OR resolved as shift (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 59 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 59 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 59 and token OP_MULT resolved as reduce (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 59 and token OP_DIV resolved as reduce (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 59 and token OP_MOD resolved as reduce (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 59 and token OP_POWER resolved as reduce (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 59 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 59 and token ROP_NOTEQUALS resolved as reduce (%left ROP_NOTEQUALS).
    Conflict between rule 59 and token ROP_LESS resolved as shift (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 59 and token ROP_LESSEQUALS resolved as shift (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 59 and token ROP_GREATER resolved as shift (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 59 and token ROP_GREATEREQUALS resolved as shift (ROP_NOTEQUALS < ROP_GREATEREQUALS).


State 119

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   54                | expr ROP_LESS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 54 (relational_expr)

    Conflict between rule 54 and token KW_AND resolved as shift (ROP_LESS < KW_AND).
    Conflict between rule 54 and token KW_OR resolved as shift (ROP_LESS < KW_OR).
    Conflict between rule 54 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESS).
    Conflict between rule 54 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESS).
    Conflict between rule 54 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESS).
    Conflict between rule 54 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESS).
    Conflict between rule 54 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESS).
    Conflict between rule 54 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESS).
    Conflict between rule 54 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESS).
    Conflict between rule 54 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 54 and token ROP_LESS resolved as reduce (%left ROP_LESS).
    Conflict between rule 54 and token ROP_LESSEQUALS resolved as shift (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 54 and token ROP_GREATER resolved as shift (ROP_LESS < ROP_GREATER).
    Conflict between rule 54 and token ROP_GREATEREQUALS resolved as shift (ROP_LESS < ROP_GREATEREQUALS).


State 120

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   55                | expr ROP_LESSEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 55 (relational_expr)

    Conflict between rule 55 and token KW_AND resolved as shift (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 55 and token KW_OR resolved as shift (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 55 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 55 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 55 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 55 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 55 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 55 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_LESSEQUALS resolved as reduce (%left ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_GREATER resolved as shift (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 55 and token ROP_GREATEREQUALS resolved as shift (ROP_LESSEQUALS < ROP_GREATEREQUALS).


State 121

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   56                | expr ROP_GREATER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    ROP_GREATEREQUALS  shift, and go to state 89

    $default  reduce using rule 56 (relational_expr)

    Conflict between rule 56 and token KW_AND resolved as shift (ROP_GREATER < KW_AND).
    Conflict between rule 56 and token KW_OR resolved as shift (ROP_GREATER < KW_OR).
    Conflict between rule 56 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATER).
    Conflict between rule 56 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATER).
    Conflict between rule 56 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATER).
    Conflict between rule 56 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATER).
    Conflict between rule 56 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATER).
    Conflict between rule 56 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATER).
    Conflict between rule 56 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 56 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 56 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATER).
    Conflict between rule 56 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 56 and token ROP_GREATER resolved as reduce (%left ROP_GREATER).
    Conflict between rule 56 and token ROP_GREATEREQUALS resolved as shift (ROP_GREATER < ROP_GREATEREQUALS).


State 122

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   57                | expr ROP_GREATEREQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr

    KW_AND  shift, and go to state 76
    KW_OR   shift, and go to state 77

    $default  reduce using rule 57 (relational_expr)

    Conflict between rule 57 and token KW_AND resolved as shift (ROP_GREATEREQUALS < KW_AND).
    Conflict between rule 57 and token KW_OR resolved as shift (ROP_GREATEREQUALS < KW_OR).
    Conflict between rule 57 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATEREQUALS).
    Conflict between rule 57 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATEREQUALS).
    Conflict between rule 57 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATEREQUALS).
    Conflict between rule 57 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_GREATER resolved as reduce (ROP_GREATER < ROP_GREATEREQUALS).
    Conflict between rule 57 and token ROP_GREATEREQUALS resolved as reduce (%left ROP_GREATEREQUALS).


State 123

   30 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 159


State 124

   68 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type
   69       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON basic_data_type DEL_COMMA params

    DEL_COLON  shift, and go to state 160


State 125

   66 params: TK_IDENTIFIER DEL_COLON basic_data_type •  [DEL_RPAR]
   67       | TK_IDENTIFIER DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 161

    $default  reduce using rule 66 (params)


State 126

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 162


State 127

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 163
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 128

   12 variable_declaration: TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   50 identifier_expr: TK_IDENTIFIER •  [AOP_ASSIGN]
   52                | TK_IDENTIFIER • DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   89 assign_statement: TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   91                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   92                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
   99 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  105 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  106                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    AOP_PLUSASSIGN   shift, and go to state 164
    AOP_MINASSIGN    shift, and go to state 165
    AOP_MULASSIGN    shift, and go to state 166
    AOP_DIVASSIGN    shift, and go to state 167
    AOP_MODASSIGN    shift, and go to state 168
    AOP_COLONASSIGN  shift, and go to state 169
    DEL_LPAR         shift, and go to state 69
    DEL_LBRACKET     shift, and go to state 170

    AOP_ASSIGN  reduce using rule 50 (identifier_expr)
    $default    reduce using rule 19 (identifier)


State 129

   94 if_statement: KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 171


State 130

   97 for_statement: KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 172


State 131

   96 while_statement: KW_WHILE • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_LPAR  shift, and go to state 173


State 132

  101 break_statement: KW_BREAK • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 174


State 133

  102 continue_statement: KW_CONTINUE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 175


State 134

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  103 return_statement: KW_RETURN • DEL_SMCOLON
  104                 | KW_RETURN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_SMCOLON    shift, and go to state 176
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 177
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 135

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   71          | variable_declaration • func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 178
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 136

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   72          | const • func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 179
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 137

   88 assign_statement: identifier_expr • AOP_ASSIGN expr DEL_SMCOLON

    AOP_ASSIGN  shift, and go to state 180


State 138

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 181


State 139

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   73          | statements • func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 182
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 140

   76 statements: assign_statement •

    $default  reduce using rule 76 (statements)


State 141

   74 statements: if_statement •

    $default  reduce using rule 74 (statements)


State 142

   75 statements: while_statement •

    $default  reduce using rule 75 (statements)


State 143

   77 statements: for_statement •

    $default  reduce using rule 77 (statements)


State 144

   78 statements: array_int_comprehension •

    $default  reduce using rule 78 (statements)


State 145

   79 statements: array_comprehension •

    $default  reduce using rule 79 (statements)


State 146

   81 statements: break_statement •

    $default  reduce using rule 81 (statements)


State 147

   82 statements: continue_statement •

    $default  reduce using rule 82 (statements)


State 148

   80 statements: return_statement •

    $default  reduce using rule 80 (statements)


State 149

   83 statements: function_statement • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 183


State 150

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   65 params: ε •  [DEL_RPAR]
   66       | • TK_IDENTIFIER DEL_COLON basic_data_type
   67       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   68       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 57

    $default  reduce using rule 65 (params)

    params  go to state 184


State 151

   21 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON •

    $default  reduce using rule 21 (comp)


State 152

   27 comp_identifiers: comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 185


State 153

   24 comp_field: comp_identifiers DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 186


State 154

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 12 (variable_declaration)


State 155

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  107 function_arguments: • expr
  108                   | • expr DEL_COMMA function_arguments
  108                   | expr DEL_COMMA • function_arguments

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 104
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56
    function_arguments  go to state 187


State 156

  106 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR •

    $default  reduce using rule 106 (function_statement)


State 157

   52 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET •

    $default  reduce using rule 52 (identifier_expr)


State 158

   53 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •

    $default  reduce using rule 53 (identifier_expr)


State 159

   30 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 30 (const)


State 160

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   68 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type
   69       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • basic_data_type DEL_COMMA params

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 188


State 161

   65 params: ε •  [DEL_RPAR]
   66       | • TK_IDENTIFIER DEL_COLON basic_data_type
   67       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   67       | TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA • params
   68       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 57

    $default  reduce using rule 65 (params)

    params  go to state 189


State 162

   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 190


State 163

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 191


State 164

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   89 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 192
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 165

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   90 assign_statement: TK_IDENTIFIER AOP_MINASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 193
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 166

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   91 assign_statement: TK_IDENTIFIER AOP_MULASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 194
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 167

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   92 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 195
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 168

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   93 assign_statement: TK_IDENTIFIER AOP_MODASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 196
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 169

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 197


State 170

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   52 identifier_expr: TK_IDENTIFIER DEL_LBRACKET • TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER DEL_LBRACKET • TK_INTEGER DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 106
    TK_INTEGER     shift, and go to state 198
    DEL_RBRACKET   shift, and go to state 26


State 171

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   94 if_statement: KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 199
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 172

   97 for_statement: KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_IN  shift, and go to state 200


State 173

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   96 while_statement: KW_WHILE DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 201
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 174

  101 break_statement: KW_BREAK DEL_SMCOLON •

    $default  reduce using rule 101 (break_statement)


State 175

  102 continue_statement: KW_CONTINUE DEL_SMCOLON •

    $default  reduce using rule 102 (continue_statement)


State 176

  103 return_statement: KW_RETURN DEL_SMCOLON •

    $default  reduce using rule 103 (return_statement)


State 177

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
  104 return_statement: KW_RETURN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 202


State 178

   71 func_body: variable_declaration func_body •

    $default  reduce using rule 71 (func_body)


State 179

   72 func_body: const func_body •

    $default  reduce using rule 72 (func_body)


State 180

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   88 assign_statement: identifier_expr AOP_ASSIGN • expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 203
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 181

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 204


State 182

   73 func_body: statements func_body •

    $default  reduce using rule 73 (func_body)


State 183

   83 statements: function_statement DEL_SMCOLON •

    $default  reduce using rule 83 (statements)


State 184

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 205


State 185

   27 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER •

    $default  reduce using rule 27 (comp_identifiers)


State 186

   24 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 24 (comp_field)


State 187

  108 function_arguments: expr DEL_COMMA function_arguments •

    $default  reduce using rule 108 (function_arguments)


State 188

   68 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type •  [DEL_RPAR]
   69       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type • DEL_COMMA params

    DEL_COMMA  shift, and go to state 206

    $default  reduce using rule 68 (params)


State 189

   67 params: TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 67 (params)


State 190

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 207
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 191

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 208


State 192

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   89 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 209


State 193

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   90 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 210


State 194

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   91 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 211


State 195

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   92 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 212


State 196

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   93 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 213


State 197

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 214
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 198

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   53 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER • DEL_RBRACKET

    DEL_RBRACKET  shift, and go to state 215


State 199

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   94 if_statement: KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_RPAR           shift, and go to state 216


State 200

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 217


State 201

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   96 while_statement: KW_WHILE DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_RPAR           shift, and go to state 218


State 202

  104 return_statement: KW_RETURN expr DEL_SMCOLON •

    $default  reduce using rule 104 (return_statement)


State 203

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   88 assign_statement: identifier_expr AOP_ASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_SMCOLON        shift, and go to state 219


State 204

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 10 (main_func)


State 205

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   29              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 220
    DEL_COLON  shift, and go to state 221


State 206

   65 params: ε •  [DEL_RPAR]
   66       | • TK_IDENTIFIER DEL_COLON basic_data_type
   67       | • TK_IDENTIFIER DEL_COLON basic_data_type DEL_COMMA params
   68       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type
   69       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params
   69       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA • params

    TK_IDENTIFIER  shift, and go to state 57

    $default  reduce using rule 65 (params)

    params  go to state 222


State 207

   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 223


State 208

   63 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 63 (function)


State 209

   89 assign_statement: TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 89 (assign_statement)


State 210

   90 assign_statement: TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 90 (assign_statement)


State 211

   91 assign_statement: TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 91 (assign_statement)


State 212

   92 assign_statement: TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 92 (assign_statement)


State 213

   93 assign_statement: TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 93 (assign_statement)


State 214

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_FOR             shift, and go to state 224
    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89


State 215

   12 variable_declaration: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON
   53 identifier_expr: TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET •  [AOP_ASSIGN]

    DEL_COLON  shift, and go to state 67

    $default  reduce using rule 53 (identifier_expr)


State 216

   94 if_statement: KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 225


State 217

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 226
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 218

   96 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_COLON  shift, and go to state 227


State 219

   88 assign_statement: identifier_expr AOP_ASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 88 (assign_statement)


State 220

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 228


State 221

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 229
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 222

   69 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON basic_data_type DEL_COMMA params •

    $default  reduce using rule 69 (params)


State 223

   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 230


State 224

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 231


State 225

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ELSE, KW_ENDIF]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   94             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 235
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 226

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_COLON          shift, and go to state 236


State 227

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ENDWHILE]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   96                | KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 237
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 228

   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 238


State 229

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 239


State 230

   64 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW basic_data_type DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 64 (function)


State 231

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 240


State 232

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   85               | • variable_declaration statement_body
   85               | variable_declaration • statement_body
   86               | • const statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 241
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 233

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   86               | const • statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 242
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 234

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   87               | • statements statement_body
   87               | statements • statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 243
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 235

   94 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON

    KW_ELSE   shift, and go to state 244
    KW_ENDIF  shift, and go to state 245


State 236

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 246
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 237

   96 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDWHILE DEL_SMCOLON

    KW_ENDWHILE  shift, and go to state 247


State 238

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   70 func_body: ε •  [KW_ENDDEF]
   71          | • variable_declaration func_body
   72          | • const func_body
   73          | • statements func_body
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 70 (func_body)

    variable_declaration     go to state 135
    identifier               go to state 10
    const                    go to state 136
    identifier_expr          go to state 137
    func_body                go to state 248
    statements               go to state 139
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 239

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 249


State 240

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 250
    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 251


State 241

   85 statement_body: variable_declaration statement_body •

    $default  reduce using rule 85 (statement_body)


State 242

   86 statement_body: const statement_body •

    $default  reduce using rule 86 (statement_body)


State 243

   87 statement_body: statements statement_body •

    $default  reduce using rule 87 (statement_body)


State 244

   95 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE • DEL_COLON statements KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 252


State 245

   94 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 253


State 246

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_RBRACKET       shift, and go to state 254
    DEL_COLON          shift, and go to state 255


State 247

   96 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 256


State 248

   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 257


State 249

   28 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 28 (comp_function)


State 250

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 258


State 251

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types • KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_IN  shift, and go to state 259


State 252

   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   95             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON • statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 260
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    identifier_expr          go to state 137
    statements               go to state 261
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 253

   94 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 94 (if_statement)


State 254

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 262


State 255

   31 expr: • identifier_expr
   32     | • TK_STRING
   33     | • KW_TRUE
   34     | • KW_FALSE
   35     | • DEL_LPAR expr DEL_RPAR
   36     | • arithmetic_expr
   37     | • relational_expr
   38     | • logical_statements
   39     | • function_statement
   40 arithmetic_expr: • TK_INTEGER
   41                | • TK_REAL
   42                | • expr OP_POWER expr
   43                | • expr OP_MULT expr
   44                | • expr OP_DIV expr
   45                | • expr OP_MOD expr
   46                | • expr OP_PLUS expr
   47                | • expr OP_MINUS expr
   48                | • OP_PLUS expr
   49                | • OP_MINUS expr
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   54 relational_expr: • expr ROP_LESS expr
   55                | • expr ROP_LESSEQUALS expr
   56                | • expr ROP_GREATER expr
   57                | • expr ROP_GREATEREQUALS expr
   58                | • expr ROP_EQUALS expr
   59                | • expr ROP_NOTEQUALS expr
   60 logical_statements: • KW_NOT expr
   61                   | • expr KW_AND expr
   62                   | • expr KW_OR expr
   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 40
    TK_INTEGER     shift, and go to state 41
    TK_REAL        shift, and go to state 42
    TK_STRING      shift, and go to state 43
    KW_TRUE        shift, and go to state 44
    KW_FALSE       shift, and go to state 45
    KW_NOT         shift, and go to state 46
    OP_PLUS        shift, and go to state 47
    OP_MINUS       shift, and go to state 48
    DEL_LPAR       shift, and go to state 49
    HASH           shift, and go to state 50

    expr                go to state 263
    arithmetic_expr     go to state 52
    identifier_expr     go to state 53
    relational_expr     go to state 54
    logical_statements  go to state 55
    function_statement  go to state 56


State 256

   96 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON •

    $default  reduce using rule 96 (while_statement)


State 257

   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 264


State 258

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 265


State 259

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN • TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 266


State 260

   50 identifier_expr: TK_IDENTIFIER •  [AOP_ASSIGN]
   52                | TK_IDENTIFIER • DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | TK_IDENTIFIER • DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   89 assign_statement: TK_IDENTIFIER • AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | TK_IDENTIFIER • AOP_MINASSIGN expr DEL_SMCOLON
   91                 | TK_IDENTIFIER • AOP_MULASSIGN expr DEL_SMCOLON
   92                 | TK_IDENTIFIER • AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | TK_IDENTIFIER • AOP_MODASSIGN expr DEL_SMCOLON
   99 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  105 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  106                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    AOP_PLUSASSIGN   shift, and go to state 164
    AOP_MINASSIGN    shift, and go to state 165
    AOP_MULASSIGN    shift, and go to state 166
    AOP_DIVASSIGN    shift, and go to state 167
    AOP_MODASSIGN    shift, and go to state 168
    AOP_COLONASSIGN  shift, and go to state 169
    DEL_LPAR         shift, and go to state 69
    DEL_LBRACKET     shift, and go to state 70

    $default  reduce using rule 50 (identifier_expr)


State 261

   95 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements • KW_ENDIF DEL_SMCOLON

    KW_ENDIF  shift, and go to state 267


State 262

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ENDFOR]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   97              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 268
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 263

   42 arithmetic_expr: expr • OP_POWER expr
   43                | expr • OP_MULT expr
   44                | expr • OP_DIV expr
   45                | expr • OP_MOD expr
   46                | expr • OP_PLUS expr
   47                | expr • OP_MINUS expr
   54 relational_expr: expr • ROP_LESS expr
   55                | expr • ROP_LESSEQUALS expr
   56                | expr • ROP_GREATER expr
   57                | expr • ROP_GREATEREQUALS expr
   58                | expr • ROP_EQUALS expr
   59                | expr • ROP_NOTEQUALS expr
   61 logical_statements: expr • KW_AND expr
   62                   | expr • KW_OR expr
   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 76
    KW_OR              shift, and go to state 77
    OP_PLUS            shift, and go to state 78
    OP_MINUS           shift, and go to state 79
    OP_MULT            shift, and go to state 80
    OP_DIV             shift, and go to state 81
    OP_MOD             shift, and go to state 82
    OP_POWER           shift, and go to state 83
    ROP_EQUALS         shift, and go to state 84
    ROP_NOTEQUALS      shift, and go to state 85
    ROP_LESS           shift, and go to state 86
    ROP_LESSEQUALS     shift, and go to state 87
    ROP_GREATER        shift, and go to state 88
    ROP_GREATEREQUALS  shift, and go to state 89
    DEL_RBRACKET       shift, and go to state 269


State 264

   29 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 29 (comp_function)


State 265

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 270


State 266

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER • KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_OF  shift, and go to state 271


State 267

   95 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 272


State 268

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 273


State 269

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 274


State 270

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 275


State 271

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 276


State 272

   95 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 95 (if_statement)


State 273

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 277


State 274

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   12                     | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   13                     | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_SMCOLON
   19 identifier: • TK_IDENTIFIER
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   30 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   50 identifier_expr: • TK_IDENTIFIER
   51                | • HASH TK_IDENTIFIER
   52                | • TK_IDENTIFIER DEL_LBRACKET TK_IDENTIFIER DEL_RBRACKET
   53                | • TK_IDENTIFIER DEL_LBRACKET TK_INTEGER DEL_RBRACKET
   74 statements: • if_statement
   75           | • while_statement
   76           | • assign_statement
   77           | • for_statement
   78           | • array_int_comprehension
   79           | • array_comprehension
   80           | • return_statement
   81           | • break_statement
   82           | • continue_statement
   83           | • function_statement DEL_SMCOLON
   84 statement_body: ε •  [KW_ENDFOR]
   85               | • variable_declaration statement_body
   86               | • const statement_body
   87               | • statements statement_body
   88 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   89                 | • TK_IDENTIFIER AOP_PLUSASSIGN expr DEL_SMCOLON
   90                 | • TK_IDENTIFIER AOP_MINASSIGN expr DEL_SMCOLON
   91                 | • TK_IDENTIFIER AOP_MULASSIGN expr DEL_SMCOLON
   92                 | • TK_IDENTIFIER AOP_DIVASSIGN expr DEL_SMCOLON
   93                 | • TK_IDENTIFIER AOP_MODASSIGN expr DEL_SMCOLON
   94 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
   95             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statements KW_ENDIF DEL_SMCOLON
   96 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
   97 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
   98              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
   99 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  100 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  101 break_statement: • KW_BREAK DEL_SMCOLON
  102 continue_statement: • KW_CONTINUE DEL_SMCOLON
  103 return_statement: • KW_RETURN DEL_SMCOLON
  104                 | • KW_RETURN expr DEL_SMCOLON
  105 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  106                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 128
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 129
    KW_FOR         shift, and go to state 130
    KW_WHILE       shift, and go to state 131
    KW_BREAK       shift, and go to state 132
    KW_CONTINUE    shift, and go to state 133
    KW_RETURN      shift, and go to state 134
    HASH           shift, and go to state 50

    $default  reduce using rule 84 (statement_body)

    variable_declaration     go to state 232
    identifier               go to state 10
    const                    go to state 233
    identifier_expr          go to state 137
    statements               go to state 234
    statement_body           go to state 278
    assign_statement         go to state 140
    if_statement             go to state 141
    while_statement          go to state 142
    for_statement            go to state 143
    array_int_comprehension  go to state 144
    array_comprehension      go to state 145
    break_statement          go to state 146
    continue_statement       go to state 147
    return_statement         go to state 148
    function_statement       go to state 149


State 275

   99 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 99 (array_int_comprehension)


State 276

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 279


State 277

   97 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 97 (for_statement)


State 278

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 280


State 279

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 281


State 280

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 282


State 281

   14 basic_data_type: • KW_INT
   15                | • KW_SCALAR
   16                | • KW_STR
   17                | • KW_BOOLEAN
   18 types: • basic_data_type
  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    KW_INT      shift, and go to state 32
    KW_SCALAR   shift, and go to state 33
    KW_STR      shift, and go to state 34
    KW_BOOLEAN  shift, and go to state 35

    basic_data_type  go to state 36
    types            go to state 283


State 282

   98 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 98 (for_statement)


State 283

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 284


State 284

  100 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 100 (array_comprehension)
