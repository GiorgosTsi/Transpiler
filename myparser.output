Grammar

    0 $accept: input $end

    1 input: ε
    2      | declarations main_func
    3      | main_func

    4 declarations: declarations declaration
    5             | declaration

    6 declaration: variable_declaration
    7            | comp
    8            | const
    9            | function

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON

   12 basic_data_type: KW_INT
   13                | KW_SCALAR
   14                | KW_STR
   15                | KW_BOOLEAN

   16 types: basic_data_type
   17      | TK_IDENTIFIER

   18 identifier: identifier_expr
   19           | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | identifier DEL_COMMA TK_IDENTIFIER
   21           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

   23 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

   24 comp_body: comp_field
   25          | comp_field comp_body

   26 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON
   27           | comp_function

   28 comp_identifiers: HASH TK_IDENTIFIER
   29                 | HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   30                 | HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   31                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   32                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   36 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

   37 expr: identifier_expr
   38     | TK_STRING
   39     | KW_TRUE
   40     | KW_FALSE
   41     | DEL_LPAR expr DEL_RPAR
   42     | arithmetic_expr
   43     | relational_expr
   44     | logical_statements
   45     | function_statement

   46 arithmetic_expr: TK_INTEGER
   47                | TK_REAL
   48                | expr OP_POWER expr
   49                | expr OP_MULT expr
   50                | expr OP_DIV expr
   51                | expr OP_MOD expr
   52                | expr OP_PLUS expr
   53                | expr OP_MINUS expr
   54                | OP_PLUS expr
   55                | OP_MINUS expr

   56 identifier_expr: TK_IDENTIFIER
   57                | HASH TK_IDENTIFIER
   58                | TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | identifier_expr DEL_DOT TK_IDENTIFIER

   62 relational_expr: expr ROP_LESS expr
   63                | expr ROP_LESSEQUALS expr
   64                | expr ROP_GREATER expr
   65                | expr ROP_GREATEREQUALS expr
   66                | expr ROP_EQUALS expr
   67                | expr ROP_NOTEQUALS expr

   68 logical_statements: KW_NOT expr
   69                   | expr KW_AND expr
   70                   | expr KW_OR expr

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

   73 params: ε
   74       | TK_IDENTIFIER DEL_COLON types
   75       | TK_IDENTIFIER DEL_COLON types DEL_COMMA params
   76       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params

   78 func_body: ε
   79          | variable_declaration func_body
   80          | const func_body
   81          | statements func_body

   82 statements: if_statement
   83           | while_statement
   84           | assign_statement
   85           | for_statement
   86           | array_int_comprehension
   87           | array_comprehension
   88           | return_statement
   89           | break_statement
   90           | continue_statement
   91           | function_statement DEL_SMCOLON

   92 statement_body: ε
   93               | variable_declaration statement_body
   94               | const statement_body
   95               | statements statement_body

   96 assign_statement: identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | identifier_expr AOP_MODASSIGN expr DEL_SMCOLON

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

  104 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

  109 break_statement: KW_BREAK DEL_SMCOLON

  110 continue_statement: KW_CONTINUE DEL_SMCOLON

  111 return_statement: KW_RETURN DEL_SMCOLON
  112                 | KW_RETURN expr DEL_SMCOLON

  113 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

  117 function_arguments: expr
  118                   | expr DEL_COMMA function_arguments


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TK_IDENTIFIER <str> (258) 17 19 20 21 22 23 28 29 30 31 32 33 34 35 56 57 58 59 60 61 71 72 74 75 76 77 105 106 107 108 113 114 115 116
    TK_INTEGER <str> (259) 46 107 108
    TK_REAL <str> (260) 47
    TK_STRING <str> (261) 38
    KW_INT (262) 12
    KW_SCALAR (263) 13
    KW_STR (264) 14
    KW_BOOLEAN (265) 15
    KW_TRUE (266) 39
    KW_FALSE (267) 40
    KW_CONST (268) 36
    KW_IF (269) 102 103
    KW_ELSE (270) 103
    KW_ENDIF (271) 102 103
    KW_FOR (272) 105 106 107 108
    KW_IN (273) 105 106 108
    KW_ENDFOR (274) 105 106
    KW_WHILE (275) 104
    KW_ENDWHILE (276) 104
    KW_BREAK (277) 109
    KW_CONTINUE (278) 110
    KW_NOT (279) 68
    KW_AND (280) 69
    KW_OR (281) 70
    KW_DEF (282) 10 34 35 71 72
    KW_ENDDEF (283) 10 34 35 71 72
    KW_MAIN (284) 10
    KW_RETURN (285) 111 112
    KW_COMP (286) 23
    KW_ENDCOMP (287) 23
    KW_OF (288) 108
    OP_PLUS (289) 52 54
    OP_MINUS (290) 53 55
    OP_MULT (291) 49
    OP_DIV (292) 50
    OP_MOD (293) 51
    OP_POWER (294) 48
    ROP_EQUALS (295) 66
    ROP_NOTEQUALS (296) 67
    ROP_LESS (297) 62
    ROP_LESSEQUALS (298) 63
    ROP_GREATER (299) 64
    ROP_GREATEREQUALS (300) 65
    AOP_ASSIGN (301) 36 96
    AOP_PLUSASSIGN (302) 97
    AOP_MINASSIGN (303) 98
    AOP_MULASSIGN (304) 99
    AOP_DIVASSIGN (305) 100
    AOP_MODASSIGN (306) 101
    AOP_COLONASSIGN (307) 107 108
    AOP_ARROW (308) 35 72
    DEL_SMCOLON (309) 10 11 23 26 34 35 36 71 72 91 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
    DEL_LPAR (310) 10 34 35 41 71 72 102 103 104 113 114 115 116
    DEL_RPAR (311) 10 34 35 41 71 72 102 103 104 113 114 115 116
    DEL_COMMA (312) 20 21 22 31 32 33 75 77 118
    DEL_LBRACKET (313) 19 21 22 29 30 32 33 58 59 76 77 105 106 107 108
    DEL_RBRACKET (314) 19 21 22 29 30 32 33 58 59 76 77 105 106 107 108
    DEL_COLON (315) 10 11 23 26 34 35 36 71 72 74 75 76 77 102 103 104 105 106 107 108
    DEL_DOT (316) 60 61 115 116
    HASH (317) 28 29 30 31 32 33 57 59 60


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    input (64)
        on left: 1 2 3
        on right: 0
    declarations <str> (65)
        on left: 4 5
        on right: 2 4
    declaration <str> (66)
        on left: 6 7 8 9
        on right: 4 5
    main_func <str> (67)
        on left: 10
        on right: 2 3
    variable_declaration <str> (68)
        on left: 11
        on right: 6 79 93
    basic_data_type <str> (69)
        on left: 12 13 14 15
        on right: 16 36
    types <str> (70)
        on left: 16 17
        on right: 11 26 35 72 74 75 76 77 107 108
    identifier <str> (71)
        on left: 18 19 20 21 22
        on right: 11 20 21 22 36
    comp <str> (72)
        on left: 23
        on right: 7
    comp_body <str> (73)
        on left: 24 25
        on right: 23 25
    comp_field <str> (74)
        on left: 26 27
        on right: 24 25
    comp_identifiers <str> (75)
        on left: 28 29 30 31 32 33
        on right: 26 31 32 33
    comp_function <str> (76)
        on left: 34 35
        on right: 27
    const <str> (77)
        on left: 36
        on right: 8 80 94
    expr <str> (78)
        on left: 37 38 39 40 41 42 43 44 45
        on right: 21 29 32 36 41 48 49 50 51 52 53 54 55 58 59 62 63 64 65 66 67 68 69 70 96 97 98 99 100 101 102 103 104 105 106 107 108 112 117 118
    arithmetic_expr <str> (79)
        on left: 46 47 48 49 50 51 52 53 54 55
        on right: 42
    identifier_expr <str> (80)
        on left: 56 57 58 59 60 61
        on right: 18 37 60 61 96 97 98 99 100 101 115 116
    relational_expr <str> (81)
        on left: 62 63 64 65 66 67
        on right: 43
    logical_statements <str> (82)
        on left: 68 69 70
        on right: 44
    function <str> (83)
        on left: 71 72
        on right: 9
    params <str> (84)
        on left: 73 74 75 76 77
        on right: 34 35 71 72 75 77
    func_body <str> (85)
        on left: 78 79 80 81
        on right: 10 34 35 71 72 79 80 81
    statements <str> (86)
        on left: 82 83 84 85 86 87 88 89 90 91
        on right: 81 95
    statement_body <str> (87)
        on left: 92 93 94 95
        on right: 93 94 95 102 103 104 105 106
    assign_statement <str> (88)
        on left: 96 97 98 99 100 101
        on right: 84
    if_statement <str> (89)
        on left: 102 103
        on right: 82
    while_statement <str> (90)
        on left: 104
        on right: 83
    for_statement <str> (91)
        on left: 105 106
        on right: 85
    array_int_comprehension <str> (92)
        on left: 107
        on right: 86
    array_comprehension <str> (93)
        on left: 108
        on right: 87
    break_statement <str> (94)
        on left: 109
        on right: 89
    continue_statement <str> (95)
        on left: 110
        on right: 90
    return_statement <str> (96)
        on left: 111 112
        on right: 88
    function_statement <str> (97)
        on left: 113 114 115 116
        on right: 45 91
    function_arguments <str> (98)
        on left: 117 118
        on right: 114 116 118


State 0

    0 $accept: • input $end
    1 input: ε •  [$end]
    2      | • declarations main_func
    3      | • main_func
    4 declarations: • declarations declaration
    5             | • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   23 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   71 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4
    HASH           shift, and go to state 5

    $default  reduce using rule 1 (input)

    input                 go to state 6
    declarations          go to state 7
    declaration           go to state 8
    main_func             go to state 9
    variable_declaration  go to state 10
    identifier            go to state 11
    comp                  go to state 12
    const                 go to state 13
    identifier_expr       go to state 14
    function              go to state 15


State 1

   19 identifier: TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET
   56 identifier_expr: TK_IDENTIFIER •  [AOP_ASSIGN, DEL_COMMA, DEL_COLON, DEL_DOT]
   58                | TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 16

    $default  reduce using rule 56 (identifier_expr)


State 2

   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: KW_CONST • identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 1
    HASH           shift, and go to state 5

    identifier       go to state 17
    identifier_expr  go to state 14


State 3

   10 main_func: KW_DEF • KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   71 function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 18
    KW_MAIN        shift, and go to state 19


State 4

   23 comp: KW_COMP • TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 20


State 5

   57 identifier_expr: HASH • TK_IDENTIFIER
   59                | HASH • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 21


State 6

    0 $accept: input • $end

    $end  shift, and go to state 22


State 7

    2 input: declarations • main_func
    4 declarations: declarations • declaration
    6 declaration: • variable_declaration
    7            | • comp
    8            | • const
    9            | • function
   10 main_func: • KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   23 comp: • KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   71 function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 1
    KW_CONST       shift, and go to state 2
    KW_DEF         shift, and go to state 3
    KW_COMP        shift, and go to state 4
    HASH           shift, and go to state 5

    declaration           go to state 23
    main_func             go to state 24
    variable_declaration  go to state 10
    identifier            go to state 11
    comp                  go to state 12
    const                 go to state 13
    identifier_expr       go to state 14
    function              go to state 15


State 8

    5 declarations: declaration •

    $default  reduce using rule 5 (declarations)


State 9

    3 input: main_func •

    $default  reduce using rule 3 (input)


State 10

    6 declaration: variable_declaration •

    $default  reduce using rule 6 (declaration)


State 11

   11 variable_declaration: identifier • DEL_COLON types DEL_SMCOLON
   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   21           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    DEL_COMMA  shift, and go to state 25
    DEL_COLON  shift, and go to state 26


State 12

    7 declaration: comp •

    $default  reduce using rule 7 (declaration)


State 13

    8 declaration: const •

    $default  reduce using rule 8 (declaration)


State 14

   18 identifier: identifier_expr •  [AOP_ASSIGN, DEL_COMMA, DEL_COLON]
   60 identifier_expr: identifier_expr • DEL_DOT HASH TK_IDENTIFIER
   61                | identifier_expr • DEL_DOT TK_IDENTIFIER

    DEL_DOT  shift, and go to state 27

    $default  reduce using rule 18 (identifier)


State 15

    9 declaration: function •

    $default  reduce using rule 9 (declaration)


State 16

   19 identifier: TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET
   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   58                | TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RBRACKET   shift, and go to state 38
    HASH           shift, and go to state 5

    expr                go to state 39
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 17

   20 identifier: identifier • DEL_COMMA TK_IDENTIFIER
   21           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | identifier • DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: KW_CONST identifier • AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON

    AOP_ASSIGN  shift, and go to state 45
    DEL_COMMA   shift, and go to state 25


State 18

   71 function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 46


State 19

   10 main_func: KW_DEF KW_MAIN • DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 47


State 20

   23 comp: KW_COMP TK_IDENTIFIER • DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON

    DEL_COLON  shift, and go to state 48


State 21

   57 identifier_expr: HASH TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, AOP_ASSIGN, AOP_PLUSASSIGN, AOP_MINASSIGN, AOP_MULASSIGN, AOP_DIVASSIGN, AOP_MODASSIGN, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON, DEL_DOT]
   59                | HASH TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 49

    $default  reduce using rule 57 (identifier_expr)


State 22

    0 $accept: input $end •

    $default  accept


State 23

    4 declarations: declarations declaration •

    $default  reduce using rule 4 (declarations)


State 24

    2 input: declarations main_func •

    $default  reduce using rule 2 (input)


State 25

   20 identifier: identifier DEL_COMMA • TK_IDENTIFIER
   21           | identifier DEL_COMMA • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | identifier DEL_COMMA • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 50


State 26

   11 variable_declaration: identifier DEL_COLON • types DEL_SMCOLON
   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 57


State 27

   60 identifier_expr: identifier_expr DEL_DOT • HASH TK_IDENTIFIER
   61                | identifier_expr DEL_DOT • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 58
    HASH           shift, and go to state 59


State 28

   56 identifier_expr: TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON, DEL_DOT]
   58                | TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET
  113 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  114                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    DEL_LPAR      shift, and go to state 60
    DEL_LBRACKET  shift, and go to state 61

    $default  reduce using rule 56 (identifier_expr)


State 29

   46 arithmetic_expr: TK_INTEGER •

    $default  reduce using rule 46 (arithmetic_expr)


State 30

   47 arithmetic_expr: TK_REAL •

    $default  reduce using rule 47 (arithmetic_expr)


State 31

   38 expr: TK_STRING •

    $default  reduce using rule 38 (expr)


State 32

   39 expr: KW_TRUE •

    $default  reduce using rule 39 (expr)


State 33

   40 expr: KW_FALSE •

    $default  reduce using rule 40 (expr)


State 34

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   68                   | KW_NOT • expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 62
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 35

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   54                | OP_PLUS • expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 63
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 36

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   55                | OP_MINUS • expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 64
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 37

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   41     | DEL_LPAR • expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 65
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 38

   19 identifier: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 19 (identifier)


State 39

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   58 identifier_expr: TK_IDENTIFIER DEL_LBRACKET expr • DEL_RBRACKET
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 80


State 40

   42 expr: arithmetic_expr •

    $default  reduce using rule 42 (expr)


State 41

   37 expr: identifier_expr •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   60 identifier_expr: identifier_expr • DEL_DOT HASH TK_IDENTIFIER
   61                | identifier_expr • DEL_DOT TK_IDENTIFIER
  115 function_statement: identifier_expr • DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | identifier_expr • DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    DEL_DOT  shift, and go to state 81

    $default  reduce using rule 37 (expr)


State 42

   43 expr: relational_expr •

    $default  reduce using rule 43 (expr)


State 43

   44 expr: logical_statements •

    $default  reduce using rule 44 (expr)


State 44

   45 expr: function_statement •

    $default  reduce using rule 45 (expr)


State 45

   36 const: KW_CONST identifier AOP_ASSIGN • expr DEL_COLON basic_data_type DEL_SMCOLON
   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 82
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 46

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   73 params: ε •  [DEL_RPAR]
   74       | • TK_IDENTIFIER DEL_COLON types
   75       | • TK_IDENTIFIER DEL_COLON types DEL_COMMA params
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 73 (params)

    params  go to state 84


State 47

   10 main_func: KW_DEF KW_MAIN DEL_LPAR • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 85


State 48

   23 comp: KW_COMP TK_IDENTIFIER DEL_COLON • comp_body KW_ENDCOMP DEL_SMCOLON
   24 comp_body: • comp_field
   25          | • comp_field comp_body
   26 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   27           | • comp_function
   28 comp_identifiers: • HASH TK_IDENTIFIER
   29                 | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   30                 | • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   31                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   32                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   34 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 86
    HASH    shift, and go to state 87

    comp_body         go to state 88
    comp_field        go to state 89
    comp_identifiers  go to state 90
    comp_function     go to state 91


State 49

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | HASH TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 92
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 50

   20 identifier: identifier DEL_COMMA TK_IDENTIFIER •  [AOP_ASSIGN, DEL_COMMA, DEL_COLON]
   21           | identifier DEL_COMMA TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET
   22           | identifier DEL_COMMA TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 93

    $default  reduce using rule 20 (identifier)


State 51

   17 types: TK_IDENTIFIER •

    $default  reduce using rule 17 (types)


State 52

   12 basic_data_type: KW_INT •

    $default  reduce using rule 12 (basic_data_type)


State 53

   13 basic_data_type: KW_SCALAR •

    $default  reduce using rule 13 (basic_data_type)


State 54

   14 basic_data_type: KW_STR •

    $default  reduce using rule 14 (basic_data_type)


State 55

   15 basic_data_type: KW_BOOLEAN •

    $default  reduce using rule 15 (basic_data_type)


State 56

   16 types: basic_data_type •

    $default  reduce using rule 16 (types)


State 57

   11 variable_declaration: identifier DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 94


State 58

   61 identifier_expr: identifier_expr DEL_DOT TK_IDENTIFIER •

    $default  reduce using rule 61 (identifier_expr)


State 59

   60 identifier_expr: identifier_expr DEL_DOT HASH • TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 95


State 60

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  113                   | TK_IDENTIFIER DEL_LPAR • DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  114                   | TK_IDENTIFIER DEL_LPAR • function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  117 function_arguments: • expr
  118                   | • expr DEL_COMMA function_arguments

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RPAR       shift, and go to state 96
    HASH           shift, and go to state 5

    expr                go to state 97
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44
    function_arguments  go to state 98


State 61

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   58                | TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 39
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 62

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   68 logical_statements: KW_NOT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   69                   | expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND  shift, and go to state 66
    KW_OR   shift, and go to state 67

    $default  reduce using rule 68 (logical_statements)

    Conflict between rule 68 and token KW_AND resolved as shift (KW_NOT < KW_AND).
    Conflict between rule 68 and token KW_OR resolved as shift (KW_NOT < KW_OR).
    Conflict between rule 68 and token OP_PLUS resolved as reduce (OP_PLUS < KW_NOT).
    Conflict between rule 68 and token OP_MINUS resolved as reduce (OP_MINUS < KW_NOT).
    Conflict between rule 68 and token OP_MULT resolved as reduce (OP_MULT < KW_NOT).
    Conflict between rule 68 and token OP_DIV resolved as reduce (OP_DIV < KW_NOT).
    Conflict between rule 68 and token OP_MOD resolved as reduce (OP_MOD < KW_NOT).
    Conflict between rule 68 and token OP_POWER resolved as reduce (OP_POWER < KW_NOT).
    Conflict between rule 68 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_NOT).
    Conflict between rule 68 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_NOT).
    Conflict between rule 68 and token ROP_LESS resolved as reduce (ROP_LESS < KW_NOT).
    Conflict between rule 68 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_NOT).
    Conflict between rule 68 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_NOT).
    Conflict between rule 68 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_NOT).


State 63

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   54                | OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 54 (arithmetic_expr)

    Conflict between rule 54 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 54 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 54 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 54 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 54 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 54 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 54 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 54 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 54 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 54 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 54 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 54 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 54 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 54 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 64

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   55                | OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 55 (arithmetic_expr)

    Conflict between rule 55 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 55 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 55 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 55 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 55 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 55 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 55 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 55 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 55 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 55 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 55 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 55 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 55 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 55 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 65

   41 expr: DEL_LPAR expr • DEL_RPAR
   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RPAR           shift, and go to state 99


State 66

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   69                   | expr KW_AND • expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 100
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 67

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
   70                   | expr KW_OR • expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 101
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 68

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   52                | expr OP_PLUS • expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 102
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 69

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   53                | expr OP_MINUS • expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 103
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 70

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   49                | expr OP_MULT • expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 104
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 71

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   50                | expr OP_DIV • expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 105
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 72

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   51                | expr OP_MOD • expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 106
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 73

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   48                | expr OP_POWER • expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 107
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 74

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   66                | expr ROP_EQUALS • expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 108
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 75

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   67                | expr ROP_NOTEQUALS • expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 109
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 76

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   62                | expr ROP_LESS • expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 110
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 77

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   63                | expr ROP_LESSEQUALS • expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 111
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 78

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   64                | expr ROP_GREATER • expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 112
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 79

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   65                | expr ROP_GREATEREQUALS • expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 113
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 80

   58 identifier_expr: TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET •

    $default  reduce using rule 58 (identifier_expr)


State 81

   60 identifier_expr: identifier_expr DEL_DOT • HASH TK_IDENTIFIER
   61                | identifier_expr DEL_DOT • TK_IDENTIFIER
  115 function_statement: identifier_expr DEL_DOT • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | identifier_expr DEL_DOT • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 114
    HASH           shift, and go to state 59


State 82

   36 const: KW_CONST identifier AOP_ASSIGN expr • DEL_COLON basic_data_type DEL_SMCOLON
   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_COLON          shift, and go to state 115


State 83

   74 params: TK_IDENTIFIER • DEL_COLON types
   75       | TK_IDENTIFIER • DEL_COLON types DEL_COMMA params
   76       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params

    DEL_LBRACKET  shift, and go to state 116
    DEL_COLON     shift, and go to state 117


State 84

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 118


State 85

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 119


State 86

   34 comp_function: KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF • TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 120


State 87

   28 comp_identifiers: HASH • TK_IDENTIFIER
   29                 | HASH • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   30                 | HASH • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 121


State 88

   23 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body • KW_ENDCOMP DEL_SMCOLON

    KW_ENDCOMP  shift, and go to state 122


State 89

   24 comp_body: • comp_field
   24          | comp_field •  [KW_ENDCOMP]
   25          | • comp_field comp_body
   25          | comp_field • comp_body
   26 comp_field: • comp_identifiers DEL_COLON types DEL_SMCOLON
   27           | • comp_function
   28 comp_identifiers: • HASH TK_IDENTIFIER
   29                 | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   30                 | • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   31                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER
   32                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | • comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   34 comp_function: • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | • KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    KW_DEF  shift, and go to state 86
    HASH    shift, and go to state 87

    $default  reduce using rule 24 (comp_body)

    comp_body         go to state 123
    comp_field        go to state 89
    comp_identifiers  go to state 90
    comp_function     go to state 91


State 90

   26 comp_field: comp_identifiers • DEL_COLON types DEL_SMCOLON
   31 comp_identifiers: comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER
   32                 | comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | comp_identifiers • DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    DEL_COMMA  shift, and go to state 124
    DEL_COLON  shift, and go to state 125


State 91

   27 comp_field: comp_function •

    $default  reduce using rule 27 (comp_field)


State 92

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   59 identifier_expr: HASH TK_IDENTIFIER DEL_LBRACKET expr • DEL_RBRACKET
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 126


State 93

   21 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   22           | identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET
   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RBRACKET   shift, and go to state 127
    HASH           shift, and go to state 5

    expr                go to state 128
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 94

   11 variable_declaration: identifier DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 11 (variable_declaration)


State 95

   60 identifier_expr: identifier_expr DEL_DOT HASH TK_IDENTIFIER •

    $default  reduce using rule 60 (identifier_expr)


State 96

  113 function_statement: TK_IDENTIFIER DEL_LPAR DEL_RPAR •

    $default  reduce using rule 113 (function_statement)


State 97

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  117 function_arguments: expr •  [DEL_RPAR]
  118                   | expr • DEL_COMMA function_arguments

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_COMMA          shift, and go to state 129

    $default  reduce using rule 117 (function_arguments)


State 98

  114 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments • DEL_RPAR

    DEL_RPAR  shift, and go to state 130


State 99

   41 expr: DEL_LPAR expr DEL_RPAR •

    $default  reduce using rule 41 (expr)


State 100

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   69                   | expr KW_AND expr •  [KW_FOR, KW_AND, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   70                   | expr • KW_OR expr

    KW_OR  shift, and go to state 67

    $default  reduce using rule 69 (logical_statements)

    Conflict between rule 69 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 69 and token KW_OR resolved as shift (KW_AND < KW_OR).
    Conflict between rule 69 and token OP_PLUS resolved as reduce (OP_PLUS < KW_AND).
    Conflict between rule 69 and token OP_MINUS resolved as reduce (OP_MINUS < KW_AND).
    Conflict between rule 69 and token OP_MULT resolved as reduce (OP_MULT < KW_AND).
    Conflict between rule 69 and token OP_DIV resolved as reduce (OP_DIV < KW_AND).
    Conflict between rule 69 and token OP_MOD resolved as reduce (OP_MOD < KW_AND).
    Conflict between rule 69 and token OP_POWER resolved as reduce (OP_POWER < KW_AND).
    Conflict between rule 69 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_AND).
    Conflict between rule 69 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 69 and token ROP_LESS resolved as reduce (ROP_LESS < KW_AND).
    Conflict between rule 69 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 69 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_AND).
    Conflict between rule 69 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_AND).


State 101

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
   70                   | expr KW_OR expr •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]

    $default  reduce using rule 70 (logical_statements)

    Conflict between rule 70 and token KW_AND resolved as reduce (KW_AND < KW_OR).
    Conflict between rule 70 and token KW_OR resolved as reduce (%left KW_OR).
    Conflict between rule 70 and token OP_PLUS resolved as reduce (OP_PLUS < KW_OR).
    Conflict between rule 70 and token OP_MINUS resolved as reduce (OP_MINUS < KW_OR).
    Conflict between rule 70 and token OP_MULT resolved as reduce (OP_MULT < KW_OR).
    Conflict between rule 70 and token OP_DIV resolved as reduce (OP_DIV < KW_OR).
    Conflict between rule 70 and token OP_MOD resolved as reduce (OP_MOD < KW_OR).
    Conflict between rule 70 and token OP_POWER resolved as reduce (OP_POWER < KW_OR).
    Conflict between rule 70 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < KW_OR).
    Conflict between rule 70 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 70 and token ROP_LESS resolved as reduce (ROP_LESS < KW_OR).
    Conflict between rule 70 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 70 and token ROP_GREATER resolved as reduce (ROP_GREATER < KW_OR).
    Conflict between rule 70 and token ROP_GREATEREQUALS resolved as reduce (ROP_GREATEREQUALS < KW_OR).


State 102

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   52                | expr OP_PLUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 52 (arithmetic_expr)

    Conflict between rule 52 and token KW_AND resolved as shift (OP_PLUS < KW_AND).
    Conflict between rule 52 and token KW_OR resolved as shift (OP_PLUS < KW_OR).
    Conflict between rule 52 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 52 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 52 and token OP_MULT resolved as shift (OP_PLUS < OP_MULT).
    Conflict between rule 52 and token OP_DIV resolved as shift (OP_PLUS < OP_DIV).
    Conflict between rule 52 and token OP_MOD resolved as shift (OP_PLUS < OP_MOD).
    Conflict between rule 52 and token OP_POWER resolved as shift (OP_PLUS < OP_POWER).
    Conflict between rule 52 and token ROP_EQUALS resolved as shift (OP_PLUS < ROP_EQUALS).
    Conflict between rule 52 and token ROP_NOTEQUALS resolved as shift (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 52 and token ROP_LESS resolved as shift (OP_PLUS < ROP_LESS).
    Conflict between rule 52 and token ROP_LESSEQUALS resolved as shift (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 52 and token ROP_GREATER resolved as shift (OP_PLUS < ROP_GREATER).
    Conflict between rule 52 and token ROP_GREATEREQUALS resolved as shift (OP_PLUS < ROP_GREATEREQUALS).


State 103

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   53                | expr OP_MINUS expr •  [KW_FOR, OP_PLUS, OP_MINUS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 53 (arithmetic_expr)

    Conflict between rule 53 and token KW_AND resolved as shift (OP_MINUS < KW_AND).
    Conflict between rule 53 and token KW_OR resolved as shift (OP_MINUS < KW_OR).
    Conflict between rule 53 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 53 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 53 and token OP_MULT resolved as shift (OP_MINUS < OP_MULT).
    Conflict between rule 53 and token OP_DIV resolved as shift (OP_MINUS < OP_DIV).
    Conflict between rule 53 and token OP_MOD resolved as shift (OP_MINUS < OP_MOD).
    Conflict between rule 53 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).
    Conflict between rule 53 and token ROP_EQUALS resolved as shift (OP_MINUS < ROP_EQUALS).
    Conflict between rule 53 and token ROP_NOTEQUALS resolved as shift (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 53 and token ROP_LESS resolved as shift (OP_MINUS < ROP_LESS).
    Conflict between rule 53 and token ROP_LESSEQUALS resolved as shift (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 53 and token ROP_GREATER resolved as shift (OP_MINUS < ROP_GREATER).
    Conflict between rule 53 and token ROP_GREATEREQUALS resolved as shift (OP_MINUS < ROP_GREATEREQUALS).


State 104

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   49                | expr OP_MULT expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 49 (arithmetic_expr)

    Conflict between rule 49 and token KW_AND resolved as shift (OP_MULT < KW_AND).
    Conflict between rule 49 and token KW_OR resolved as shift (OP_MULT < KW_OR).
    Conflict between rule 49 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MULT).
    Conflict between rule 49 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MULT).
    Conflict between rule 49 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 49 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 49 and token OP_MOD resolved as shift (OP_MULT < OP_MOD).
    Conflict between rule 49 and token OP_POWER resolved as shift (OP_MULT < OP_POWER).
    Conflict between rule 49 and token ROP_EQUALS resolved as shift (OP_MULT < ROP_EQUALS).
    Conflict between rule 49 and token ROP_NOTEQUALS resolved as shift (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 49 and token ROP_LESS resolved as shift (OP_MULT < ROP_LESS).
    Conflict between rule 49 and token ROP_LESSEQUALS resolved as shift (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 49 and token ROP_GREATER resolved as shift (OP_MULT < ROP_GREATER).
    Conflict between rule 49 and token ROP_GREATEREQUALS resolved as shift (OP_MULT < ROP_GREATEREQUALS).


State 105

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   50                | expr OP_DIV expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 50 (arithmetic_expr)

    Conflict between rule 50 and token KW_AND resolved as shift (OP_DIV < KW_AND).
    Conflict between rule 50 and token KW_OR resolved as shift (OP_DIV < KW_OR).
    Conflict between rule 50 and token OP_PLUS resolved as reduce (OP_PLUS < OP_DIV).
    Conflict between rule 50 and token OP_MINUS resolved as reduce (OP_MINUS < OP_DIV).
    Conflict between rule 50 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 50 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 50 and token OP_MOD resolved as shift (OP_DIV < OP_MOD).
    Conflict between rule 50 and token OP_POWER resolved as shift (OP_DIV < OP_POWER).
    Conflict between rule 50 and token ROP_EQUALS resolved as shift (OP_DIV < ROP_EQUALS).
    Conflict between rule 50 and token ROP_NOTEQUALS resolved as shift (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 50 and token ROP_LESS resolved as shift (OP_DIV < ROP_LESS).
    Conflict between rule 50 and token ROP_LESSEQUALS resolved as shift (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 50 and token ROP_GREATER resolved as shift (OP_DIV < ROP_GREATER).
    Conflict between rule 50 and token ROP_GREATEREQUALS resolved as shift (OP_DIV < ROP_GREATEREQUALS).


State 106

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   51                | expr OP_MOD expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 51 (arithmetic_expr)

    Conflict between rule 51 and token KW_AND resolved as shift (OP_MOD < KW_AND).
    Conflict between rule 51 and token KW_OR resolved as shift (OP_MOD < KW_OR).
    Conflict between rule 51 and token OP_PLUS resolved as reduce (OP_PLUS < OP_MOD).
    Conflict between rule 51 and token OP_MINUS resolved as reduce (OP_MINUS < OP_MOD).
    Conflict between rule 51 and token OP_MULT resolved as reduce (OP_MULT < OP_MOD).
    Conflict between rule 51 and token OP_DIV resolved as reduce (OP_DIV < OP_MOD).
    Conflict between rule 51 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 51 and token OP_POWER resolved as shift (OP_MOD < OP_POWER).
    Conflict between rule 51 and token ROP_EQUALS resolved as shift (OP_MOD < ROP_EQUALS).
    Conflict between rule 51 and token ROP_NOTEQUALS resolved as shift (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 51 and token ROP_LESS resolved as shift (OP_MOD < ROP_LESS).
    Conflict between rule 51 and token ROP_LESSEQUALS resolved as shift (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 51 and token ROP_GREATER resolved as shift (OP_MOD < ROP_GREATER).
    Conflict between rule 51 and token ROP_GREATEREQUALS resolved as shift (OP_MOD < ROP_GREATEREQUALS).


State 107

   48 arithmetic_expr: expr • OP_POWER expr
   48                | expr OP_POWER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 48 (arithmetic_expr)

    Conflict between rule 48 and token KW_AND resolved as shift (OP_POWER < KW_AND).
    Conflict between rule 48 and token KW_OR resolved as shift (OP_POWER < KW_OR).
    Conflict between rule 48 and token OP_PLUS resolved as reduce (OP_PLUS < OP_POWER).
    Conflict between rule 48 and token OP_MINUS resolved as reduce (OP_MINUS < OP_POWER).
    Conflict between rule 48 and token OP_MULT resolved as reduce (OP_MULT < OP_POWER).
    Conflict between rule 48 and token OP_DIV resolved as reduce (OP_DIV < OP_POWER).
    Conflict between rule 48 and token OP_MOD resolved as reduce (OP_MOD < OP_POWER).
    Conflict between rule 48 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 48 and token ROP_EQUALS resolved as shift (OP_POWER < ROP_EQUALS).
    Conflict between rule 48 and token ROP_NOTEQUALS resolved as shift (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 48 and token ROP_LESS resolved as shift (OP_POWER < ROP_LESS).
    Conflict between rule 48 and token ROP_LESSEQUALS resolved as shift (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 48 and token ROP_GREATER resolved as shift (OP_POWER < ROP_GREATER).
    Conflict between rule 48 and token ROP_GREATEREQUALS resolved as shift (OP_POWER < ROP_GREATEREQUALS).


State 108

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   66                | expr ROP_EQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 66 (relational_expr)

    Conflict between rule 66 and token KW_AND resolved as shift (ROP_EQUALS < KW_AND).
    Conflict between rule 66 and token KW_OR resolved as shift (ROP_EQUALS < KW_OR).
    Conflict between rule 66 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_EQUALS).
    Conflict between rule 66 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_EQUALS).
    Conflict between rule 66 and token OP_MULT resolved as reduce (OP_MULT < ROP_EQUALS).
    Conflict between rule 66 and token OP_DIV resolved as reduce (OP_DIV < ROP_EQUALS).
    Conflict between rule 66 and token OP_MOD resolved as reduce (OP_MOD < ROP_EQUALS).
    Conflict between rule 66 and token OP_POWER resolved as reduce (OP_POWER < ROP_EQUALS).
    Conflict between rule 66 and token ROP_EQUALS resolved as reduce (%left ROP_EQUALS).
    Conflict between rule 66 and token ROP_NOTEQUALS resolved as shift (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 66 and token ROP_LESS resolved as shift (ROP_EQUALS < ROP_LESS).
    Conflict between rule 66 and token ROP_LESSEQUALS resolved as shift (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 66 and token ROP_GREATER resolved as shift (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 66 and token ROP_GREATEREQUALS resolved as shift (ROP_EQUALS < ROP_GREATEREQUALS).


State 109

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   67                | expr ROP_NOTEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 67 (relational_expr)

    Conflict between rule 67 and token KW_AND resolved as shift (ROP_NOTEQUALS < KW_AND).
    Conflict between rule 67 and token KW_OR resolved as shift (ROP_NOTEQUALS < KW_OR).
    Conflict between rule 67 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_NOTEQUALS).
    Conflict between rule 67 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_NOTEQUALS).
    Conflict between rule 67 and token OP_MULT resolved as reduce (OP_MULT < ROP_NOTEQUALS).
    Conflict between rule 67 and token OP_DIV resolved as reduce (OP_DIV < ROP_NOTEQUALS).
    Conflict between rule 67 and token OP_MOD resolved as reduce (OP_MOD < ROP_NOTEQUALS).
    Conflict between rule 67 and token OP_POWER resolved as reduce (OP_POWER < ROP_NOTEQUALS).
    Conflict between rule 67 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_NOTEQUALS).
    Conflict between rule 67 and token ROP_NOTEQUALS resolved as reduce (%left ROP_NOTEQUALS).
    Conflict between rule 67 and token ROP_LESS resolved as shift (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 67 and token ROP_LESSEQUALS resolved as shift (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 67 and token ROP_GREATER resolved as shift (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 67 and token ROP_GREATEREQUALS resolved as shift (ROP_NOTEQUALS < ROP_GREATEREQUALS).


State 110

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   62                | expr ROP_LESS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 62 (relational_expr)

    Conflict between rule 62 and token KW_AND resolved as shift (ROP_LESS < KW_AND).
    Conflict between rule 62 and token KW_OR resolved as shift (ROP_LESS < KW_OR).
    Conflict between rule 62 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESS).
    Conflict between rule 62 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESS).
    Conflict between rule 62 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESS).
    Conflict between rule 62 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESS).
    Conflict between rule 62 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESS).
    Conflict between rule 62 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESS).
    Conflict between rule 62 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESS).
    Conflict between rule 62 and token ROP_LESS resolved as reduce (%left ROP_LESS).
    Conflict between rule 62 and token ROP_LESSEQUALS resolved as shift (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 62 and token ROP_GREATER resolved as shift (ROP_LESS < ROP_GREATER).
    Conflict between rule 62 and token ROP_GREATEREQUALS resolved as shift (ROP_LESS < ROP_GREATEREQUALS).


State 111

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   63                | expr ROP_LESSEQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 63 (relational_expr)

    Conflict between rule 63 and token KW_AND resolved as shift (ROP_LESSEQUALS < KW_AND).
    Conflict between rule 63 and token KW_OR resolved as shift (ROP_LESSEQUALS < KW_OR).
    Conflict between rule 63 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_LESSEQUALS).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_LESSEQUALS).
    Conflict between rule 63 and token OP_MULT resolved as reduce (OP_MULT < ROP_LESSEQUALS).
    Conflict between rule 63 and token OP_DIV resolved as reduce (OP_DIV < ROP_LESSEQUALS).
    Conflict between rule 63 and token OP_MOD resolved as reduce (OP_MOD < ROP_LESSEQUALS).
    Conflict between rule 63 and token OP_POWER resolved as reduce (OP_POWER < ROP_LESSEQUALS).
    Conflict between rule 63 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_LESSEQUALS).
    Conflict between rule 63 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_LESSEQUALS).
    Conflict between rule 63 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_LESSEQUALS).
    Conflict between rule 63 and token ROP_LESSEQUALS resolved as reduce (%left ROP_LESSEQUALS).
    Conflict between rule 63 and token ROP_GREATER resolved as shift (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 63 and token ROP_GREATEREQUALS resolved as shift (ROP_LESSEQUALS < ROP_GREATEREQUALS).


State 112

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   64                | expr ROP_GREATER expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    ROP_GREATEREQUALS  shift, and go to state 79

    $default  reduce using rule 64 (relational_expr)

    Conflict between rule 64 and token KW_AND resolved as shift (ROP_GREATER < KW_AND).
    Conflict between rule 64 and token KW_OR resolved as shift (ROP_GREATER < KW_OR).
    Conflict between rule 64 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATER).
    Conflict between rule 64 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATER).
    Conflict between rule 64 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATER).
    Conflict between rule 64 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATER).
    Conflict between rule 64 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATER).
    Conflict between rule 64 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATER).
    Conflict between rule 64 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATER).
    Conflict between rule 64 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATER).
    Conflict between rule 64 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATER).
    Conflict between rule 64 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATER).
    Conflict between rule 64 and token ROP_GREATER resolved as reduce (%left ROP_GREATER).
    Conflict between rule 64 and token ROP_GREATEREQUALS resolved as shift (ROP_GREATER < ROP_GREATEREQUALS).


State 113

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   65                | expr ROP_GREATEREQUALS expr •  [KW_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON]
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND  shift, and go to state 66
    KW_OR   shift, and go to state 67

    $default  reduce using rule 65 (relational_expr)

    Conflict between rule 65 and token KW_AND resolved as shift (ROP_GREATEREQUALS < KW_AND).
    Conflict between rule 65 and token KW_OR resolved as shift (ROP_GREATEREQUALS < KW_OR).
    Conflict between rule 65 and token OP_PLUS resolved as reduce (OP_PLUS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token OP_MINUS resolved as reduce (OP_MINUS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token OP_MULT resolved as reduce (OP_MULT < ROP_GREATEREQUALS).
    Conflict between rule 65 and token OP_DIV resolved as reduce (OP_DIV < ROP_GREATEREQUALS).
    Conflict between rule 65 and token OP_MOD resolved as reduce (OP_MOD < ROP_GREATEREQUALS).
    Conflict between rule 65 and token OP_POWER resolved as reduce (OP_POWER < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_EQUALS resolved as reduce (ROP_EQUALS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_NOTEQUALS resolved as reduce (ROP_NOTEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_LESS resolved as reduce (ROP_LESS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_LESSEQUALS resolved as reduce (ROP_LESSEQUALS < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_GREATER resolved as reduce (ROP_GREATER < ROP_GREATEREQUALS).
    Conflict between rule 65 and token ROP_GREATEREQUALS resolved as reduce (%left ROP_GREATEREQUALS).


State 114

   61 identifier_expr: identifier_expr DEL_DOT TK_IDENTIFIER •  [KW_FOR, KW_AND, KW_OR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, ROP_EQUALS, ROP_NOTEQUALS, ROP_LESS, ROP_LESSEQUALS, ROP_GREATER, ROP_GREATEREQUALS, AOP_ASSIGN, AOP_PLUSASSIGN, AOP_MINASSIGN, AOP_MULASSIGN, AOP_DIVASSIGN, AOP_MODASSIGN, DEL_SMCOLON, DEL_RPAR, DEL_COMMA, DEL_RBRACKET, DEL_COLON, DEL_DOT]
  115 function_statement: identifier_expr DEL_DOT TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  116                   | identifier_expr DEL_DOT TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    DEL_LPAR  shift, and go to state 131

    $default  reduce using rule 61 (identifier_expr)


State 115

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   36 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON • basic_data_type DEL_SMCOLON

    KW_INT      shift, and go to state 52
    KW_SCALAR   shift, and go to state 53
    KW_STR      shift, and go to state 54
    KW_BOOLEAN  shift, and go to state 55

    basic_data_type  go to state 132


State 116

   76 params: TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON types
   77       | TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET DEL_COLON types DEL_COMMA params

    DEL_RBRACKET  shift, and go to state 133


State 117

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   74 params: TK_IDENTIFIER DEL_COLON • types
   75       | TK_IDENTIFIER DEL_COLON • types DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 134


State 118

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   72         | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 135
    DEL_COLON  shift, and go to state 136


State 119

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 147
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 120

   34 comp_function: KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF TK_IDENTIFIER • DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 159


State 121

   28 comp_identifiers: HASH TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   29                 | HASH TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET
   30                 | HASH TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 160

    $default  reduce using rule 28 (comp_identifiers)


State 122

   23 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 161


State 123

   25 comp_body: comp_field comp_body •

    $default  reduce using rule 25 (comp_body)


State 124

   31 comp_identifiers: comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER
   32                 | comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | comp_identifiers DEL_COMMA • HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    HASH  shift, and go to state 162


State 125

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   26 comp_field: comp_identifiers DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 163


State 126

   59 identifier_expr: HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET •

    $default  reduce using rule 59 (identifier_expr)


State 127

   22 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 22 (identifier)


State 128

   21 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr • DEL_RBRACKET
   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 164


State 129

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  117 function_arguments: • expr
  118                   | • expr DEL_COMMA function_arguments
  118                   | expr DEL_COMMA • function_arguments

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 97
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44
    function_arguments  go to state 165


State 130

  114 function_statement: TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR •

    $default  reduce using rule 114 (function_statement)


State 131

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  115                   | identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR • DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  116                   | identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR • function_arguments DEL_RPAR
  117 function_arguments: • expr
  118                   | • expr DEL_COMMA function_arguments

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RPAR       shift, and go to state 166
    HASH           shift, and go to state 5

    expr                go to state 97
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44
    function_arguments  go to state 167


State 132

   36 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 168


State 133

   76 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON types
   77       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET • DEL_COLON types DEL_COMMA params

    DEL_COLON  shift, and go to state 169


State 134

   74 params: TK_IDENTIFIER DEL_COLON types •  [DEL_RPAR]
   75       | TK_IDENTIFIER DEL_COLON types • DEL_COMMA params

    DEL_COMMA  shift, and go to state 170

    $default  reduce using rule 74 (params)


State 135

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 171


State 136

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 172
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 137

   19 identifier: TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET
   56 identifier_expr: TK_IDENTIFIER •  [AOP_ASSIGN, AOP_PLUSASSIGN, AOP_MINASSIGN, AOP_MULASSIGN, AOP_DIVASSIGN, AOP_MODASSIGN, DEL_COMMA, DEL_COLON, DEL_DOT]
   58                | TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET
  107 array_int_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER • AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  113 function_statement: TK_IDENTIFIER • DEL_LPAR DEL_RPAR
  114                   | TK_IDENTIFIER • DEL_LPAR function_arguments DEL_RPAR

    AOP_COLONASSIGN  shift, and go to state 173
    DEL_LPAR         shift, and go to state 60
    DEL_LBRACKET     shift, and go to state 16

    $default  reduce using rule 56 (identifier_expr)


State 138

  102 if_statement: KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

    DEL_LPAR  shift, and go to state 174


State 139

  105 for_statement: KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR • TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 175


State 140

  104 while_statement: KW_WHILE • DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_LPAR  shift, and go to state 176


State 141

  109 break_statement: KW_BREAK • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 177


State 142

  110 continue_statement: KW_CONTINUE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 178


State 143

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  111 return_statement: KW_RETURN • DEL_SMCOLON
  112                 | KW_RETURN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_SMCOLON    shift, and go to state 179
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 180
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 144

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   79          | variable_declaration • func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 181
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 145

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   80          | const • func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 182
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 146

   18 identifier: identifier_expr •  [DEL_COMMA, DEL_COLON]
   60 identifier_expr: identifier_expr • DEL_DOT HASH TK_IDENTIFIER
   61                | identifier_expr • DEL_DOT TK_IDENTIFIER
   96 assign_statement: identifier_expr • AOP_ASSIGN expr DEL_SMCOLON
   97                 | identifier_expr • AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | identifier_expr • AOP_MINASSIGN expr DEL_SMCOLON
   99                 | identifier_expr • AOP_MULASSIGN expr DEL_SMCOLON
  100                 | identifier_expr • AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | identifier_expr • AOP_MODASSIGN expr DEL_SMCOLON
  115 function_statement: identifier_expr • DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | identifier_expr • DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    AOP_ASSIGN      shift, and go to state 183
    AOP_PLUSASSIGN  shift, and go to state 184
    AOP_MINASSIGN   shift, and go to state 185
    AOP_MULASSIGN   shift, and go to state 186
    AOP_DIVASSIGN   shift, and go to state 187
    AOP_MODASSIGN   shift, and go to state 188
    DEL_DOT         shift, and go to state 81

    $default  reduce using rule 18 (identifier)


State 147

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 189


State 148

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   81          | statements • func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 190
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 149

   84 statements: assign_statement •

    $default  reduce using rule 84 (statements)


State 150

   82 statements: if_statement •

    $default  reduce using rule 82 (statements)


State 151

   83 statements: while_statement •

    $default  reduce using rule 83 (statements)


State 152

   85 statements: for_statement •

    $default  reduce using rule 85 (statements)


State 153

   86 statements: array_int_comprehension •

    $default  reduce using rule 86 (statements)


State 154

   87 statements: array_comprehension •

    $default  reduce using rule 87 (statements)


State 155

   89 statements: break_statement •

    $default  reduce using rule 89 (statements)


State 156

   90 statements: continue_statement •

    $default  reduce using rule 90 (statements)


State 157

   88 statements: return_statement •

    $default  reduce using rule 88 (statements)


State 158

   91 statements: function_statement • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 191


State 159

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF TK_IDENTIFIER DEL_LPAR • params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   73 params: ε •  [DEL_RPAR]
   74       | • TK_IDENTIFIER DEL_COLON types
   75       | • TK_IDENTIFIER DEL_COLON types DEL_COMMA params
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 73 (params)

    params  go to state 192


State 160

   29 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   30                 | HASH TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET
   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RBRACKET   shift, and go to state 193
    HASH           shift, and go to state 5

    expr                go to state 194
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 161

   23 comp: KW_COMP TK_IDENTIFIER DEL_COLON comp_body KW_ENDCOMP DEL_SMCOLON •

    $default  reduce using rule 23 (comp)


State 162

   31 comp_identifiers: comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER
   32                 | comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   33                 | comp_identifiers DEL_COMMA HASH • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET

    TK_IDENTIFIER  shift, and go to state 195


State 163

   26 comp_field: comp_identifiers DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 196


State 164

   21 identifier: identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET •

    $default  reduce using rule 21 (identifier)


State 165

  118 function_arguments: expr DEL_COMMA function_arguments •

    $default  reduce using rule 118 (function_arguments)


State 166

  115 function_statement: identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR •

    $default  reduce using rule 115 (function_statement)


State 167

  116 function_statement: identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments • DEL_RPAR

    DEL_RPAR  shift, and go to state 197


State 168

   36 const: KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON •

    $default  reduce using rule 36 (const)


State 169

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   76 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • types
   77       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON • types DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 198


State 170

   73 params: ε •  [DEL_RPAR]
   74       | • TK_IDENTIFIER DEL_COLON types
   75       | • TK_IDENTIFIER DEL_COLON types DEL_COMMA params
   75       | TK_IDENTIFIER DEL_COLON types DEL_COMMA • params
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params

    TK_IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 73 (params)

    params  go to state 199


State 171

   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 200


State 172

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 201


State 173

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN • DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 202


State 174

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  102 if_statement: KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 203
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 175

  105 for_statement: KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER • KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_IN  shift, and go to state 204


State 176

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  104 while_statement: KW_WHILE DEL_LPAR • expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 205
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 177

  109 break_statement: KW_BREAK DEL_SMCOLON •

    $default  reduce using rule 109 (break_statement)


State 178

  110 continue_statement: KW_CONTINUE DEL_SMCOLON •

    $default  reduce using rule 110 (continue_statement)


State 179

  111 return_statement: KW_RETURN DEL_SMCOLON •

    $default  reduce using rule 111 (return_statement)


State 180

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  112 return_statement: KW_RETURN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 206


State 181

   79 func_body: variable_declaration func_body •

    $default  reduce using rule 79 (func_body)


State 182

   80 func_body: const func_body •

    $default  reduce using rule 80 (func_body)


State 183

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
   96 assign_statement: identifier_expr AOP_ASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 207
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 184

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
   97 assign_statement: identifier_expr AOP_PLUSASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 208
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 185

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
   98 assign_statement: identifier_expr AOP_MINASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 209
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 186

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
   99 assign_statement: identifier_expr AOP_MULASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 210
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 187

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  100 assign_statement: identifier_expr AOP_DIVASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 211
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 188

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  101 assign_statement: identifier_expr AOP_MODASSIGN • expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 212
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 189

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 213


State 190

   81 func_body: statements func_body •

    $default  reduce using rule 81 (func_body)


State 191

   91 statements: function_statement DEL_SMCOLON •

    $default  reduce using rule 91 (statements)


State 192

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF TK_IDENTIFIER DEL_LPAR params • DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_RPAR  shift, and go to state 214


State 193

   30 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 30 (comp_identifiers)


State 194

   29 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET expr • DEL_RBRACKET
   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 215


State 195

   31 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER •  [DEL_COMMA, DEL_COLON]
   32                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER • DEL_LBRACKET expr DEL_RBRACKET
   33                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER • DEL_LBRACKET DEL_RBRACKET

    DEL_LBRACKET  shift, and go to state 216

    $default  reduce using rule 31 (comp_identifiers)


State 196

   26 comp_field: comp_identifiers DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 26 (comp_field)


State 197

  116 function_statement: identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR •

    $default  reduce using rule 116 (function_statement)


State 198

   76 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types •  [DEL_RPAR]
   77       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types • DEL_COMMA params

    DEL_COMMA  shift, and go to state 217

    $default  reduce using rule 76 (params)


State 199

   75 params: TK_IDENTIFIER DEL_COLON types DEL_COMMA params •

    $default  reduce using rule 75 (params)


State 200

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 218
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 201

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 219


State 202

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET • expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 220
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 203

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  102 if_statement: KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RPAR           shift, and go to state 221


State 204

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN • DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_LBRACKET  shift, and go to state 222


State 205

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  104 while_statement: KW_WHILE DEL_LPAR expr • DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RPAR           shift, and go to state 223


State 206

  112 return_statement: KW_RETURN expr DEL_SMCOLON •

    $default  reduce using rule 112 (return_statement)


State 207

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
   96 assign_statement: identifier_expr AOP_ASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 224


State 208

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
   97 assign_statement: identifier_expr AOP_PLUSASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 225


State 209

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
   98 assign_statement: identifier_expr AOP_MINASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 226


State 210

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
   99 assign_statement: identifier_expr AOP_MULASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 227


State 211

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  100 assign_statement: identifier_expr AOP_DIVASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 228


State 212

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  101 assign_statement: identifier_expr AOP_MODASSIGN expr • DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_SMCOLON        shift, and go to state 229


State 213

   10 main_func: KW_DEF KW_MAIN DEL_LPAR DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 10 (main_func)


State 214

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON
   35              | KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR • AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    AOP_ARROW  shift, and go to state 230
    DEL_COLON  shift, and go to state 231


State 215

   29 comp_identifiers: HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET •

    $default  reduce using rule 29 (comp_identifiers)


State 216

   32 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET • expr DEL_RBRACKET
   33                 | comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET • DEL_RBRACKET
   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    DEL_RBRACKET   shift, and go to state 232
    HASH           shift, and go to state 5

    expr                go to state 233
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 217

   73 params: ε •  [DEL_RPAR]
   74       | • TK_IDENTIFIER DEL_COLON types
   75       | • TK_IDENTIFIER DEL_COLON types DEL_COMMA params
   76       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types
   77       | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params
   77       | TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA • params

    TK_IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 73 (params)

    params  go to state 234


State 218

   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 235


State 219

   71 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 71 (function)


State 220

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr • KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_FOR             shift, and go to state 236
    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79


State 221

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 237


State 222

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET • expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 238
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 223

  104 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR • DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON

    DEL_COLON  shift, and go to state 239


State 224

   96 assign_statement: identifier_expr AOP_ASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 96 (assign_statement)


State 225

   97 assign_statement: identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 97 (assign_statement)


State 226

   98 assign_statement: identifier_expr AOP_MINASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 98 (assign_statement)


State 227

   99 assign_statement: identifier_expr AOP_MULASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 99 (assign_statement)


State 228

  100 assign_statement: identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 100 (assign_statement)


State 229

  101 assign_statement: identifier_expr AOP_MODASSIGN expr DEL_SMCOLON •

    $default  reduce using rule 101 (assign_statement)


State 230

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW • types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 240


State 231

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 241
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 232

   33 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET •

    $default  reduce using rule 33 (comp_identifiers)


State 233

   32 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr • DEL_RBRACKET
   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 242


State 234

   77 params: TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET DEL_COLON types DEL_COMMA params •

    $default  reduce using rule 77 (params)


State 235

   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 243


State 236

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR • TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 244


State 237

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ELSE, KW_ENDIF]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  102             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 248
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 238

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr • DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_COLON          shift, and go to state 249


State 239

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ENDWHILE]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  104                | KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON • statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 250
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 240

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types • DEL_COLON func_body KW_ENDDEF DEL_SMCOLON

    DEL_COLON  shift, and go to state 251


State 241

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 252


State 242

   32 comp_identifiers: comp_identifiers DEL_COMMA HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET •

    $default  reduce using rule 32 (comp_identifiers)


State 243

   72 function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 72 (function)


State 244

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER • DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 253


State 245

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   93               | • variable_declaration statement_body
   93               | variable_declaration • statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 254
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 246

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   94               | const • statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 255
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 247

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ELSE, KW_ENDIF, KW_ENDFOR, KW_ENDWHILE]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   95               | statements • statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 256
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 248

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

    KW_ELSE   shift, and go to state 257
    KW_ENDIF  shift, and go to state 258


State 249

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON • expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 259
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 250

  104 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body • KW_ENDWHILE DEL_SMCOLON

    KW_ENDWHILE  shift, and go to state 260


State 251

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON • func_body KW_ENDDEF DEL_SMCOLON
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   78 func_body: ε •  [KW_ENDDEF]
   79          | • variable_declaration func_body
   80          | • const func_body
   81          | • statements func_body
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 78 (func_body)

    variable_declaration     go to state 144
    identifier               go to state 11
    const                    go to state 145
    identifier_expr          go to state 146
    func_body                go to state 261
    statements               go to state 148
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 252

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 262


State 253

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON • types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    TK_INTEGER     shift, and go to state 263
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 264


State 254

   93 statement_body: variable_declaration statement_body •

    $default  reduce using rule 93 (statement_body)


State 255

   94 statement_body: const statement_body •

    $default  reduce using rule 94 (statement_body)


State 256

   95 statement_body: statements statement_body •

    $default  reduce using rule 95 (statement_body)


State 257

  103 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE • DEL_COLON statement_body KW_ENDIF DEL_SMCOLON

    DEL_COLON  shift, and go to state 265


State 258

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 266


State 259

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr • DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 267
    DEL_COLON          shift, and go to state 268


State 260

  104 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 269


State 261

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body • KW_ENDDEF DEL_SMCOLON

    KW_ENDDEF  shift, and go to state 270


State 262

   34 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 34 (comp_function)


State 263

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 271


State 264

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types • KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_IN  shift, and go to state 272


State 265

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ENDIF]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON • statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 273
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 266

  102 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 102 (if_statement)


State 267

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 274


State 268

   37 expr: • identifier_expr
   38     | • TK_STRING
   39     | • KW_TRUE
   40     | • KW_FALSE
   41     | • DEL_LPAR expr DEL_RPAR
   42     | • arithmetic_expr
   43     | • relational_expr
   44     | • logical_statements
   45     | • function_statement
   46 arithmetic_expr: • TK_INTEGER
   47                | • TK_REAL
   48                | • expr OP_POWER expr
   49                | • expr OP_MULT expr
   50                | • expr OP_DIV expr
   51                | • expr OP_MOD expr
   52                | • expr OP_PLUS expr
   53                | • expr OP_MINUS expr
   54                | • OP_PLUS expr
   55                | • OP_MINUS expr
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   62 relational_expr: • expr ROP_LESS expr
   63                | • expr ROP_LESSEQUALS expr
   64                | • expr ROP_GREATER expr
   65                | • expr ROP_GREATEREQUALS expr
   66                | • expr ROP_EQUALS expr
   67                | • expr ROP_NOTEQUALS expr
   68 logical_statements: • KW_NOT expr
   69                   | • expr KW_AND expr
   70                   | • expr KW_OR expr
  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON • expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 28
    TK_INTEGER     shift, and go to state 29
    TK_REAL        shift, and go to state 30
    TK_STRING      shift, and go to state 31
    KW_TRUE        shift, and go to state 32
    KW_FALSE       shift, and go to state 33
    KW_NOT         shift, and go to state 34
    OP_PLUS        shift, and go to state 35
    OP_MINUS       shift, and go to state 36
    DEL_LPAR       shift, and go to state 37
    HASH           shift, and go to state 5

    expr                go to state 275
    arithmetic_expr     go to state 40
    identifier_expr     go to state 41
    relational_expr     go to state 42
    logical_statements  go to state 43
    function_statement  go to state 44


State 269

  104 while_statement: KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON •

    $default  reduce using rule 104 (while_statement)


State 270

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 276


State 271

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 277


State 272

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN • TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 278


State 273

  103 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body • KW_ENDIF DEL_SMCOLON

    KW_ENDIF  shift, and go to state 279


State 274

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ENDFOR]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  105              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 280
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 275

   48 arithmetic_expr: expr • OP_POWER expr
   49                | expr • OP_MULT expr
   50                | expr • OP_DIV expr
   51                | expr • OP_MOD expr
   52                | expr • OP_PLUS expr
   53                | expr • OP_MINUS expr
   62 relational_expr: expr • ROP_LESS expr
   63                | expr • ROP_LESSEQUALS expr
   64                | expr • ROP_GREATER expr
   65                | expr • ROP_GREATEREQUALS expr
   66                | expr • ROP_EQUALS expr
   67                | expr • ROP_NOTEQUALS expr
   69 logical_statements: expr • KW_AND expr
   70                   | expr • KW_OR expr
  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr • DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    KW_AND             shift, and go to state 66
    KW_OR              shift, and go to state 67
    OP_PLUS            shift, and go to state 68
    OP_MINUS           shift, and go to state 69
    OP_MULT            shift, and go to state 70
    OP_DIV             shift, and go to state 71
    OP_MOD             shift, and go to state 72
    OP_POWER           shift, and go to state 73
    ROP_EQUALS         shift, and go to state 74
    ROP_NOTEQUALS      shift, and go to state 75
    ROP_LESS           shift, and go to state 76
    ROP_LESSEQUALS     shift, and go to state 77
    ROP_GREATER        shift, and go to state 78
    ROP_GREATEREQUALS  shift, and go to state 79
    DEL_RBRACKET       shift, and go to state 281


State 276

   35 comp_function: KW_DEF TK_IDENTIFIER DEL_LPAR params DEL_RPAR AOP_ARROW types DEL_COLON func_body KW_ENDDEF DEL_SMCOLON •

    $default  reduce using rule 35 (comp_function)


State 277

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 282


State 278

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER • KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    KW_OF  shift, and go to state 283


State 279

  103 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 284


State 280

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 285


State 281

  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET • DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON

    DEL_COLON  shift, and go to state 286


State 282

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 287


State 283

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF • TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    TK_INTEGER  shift, and go to state 288


State 284

  103 if_statement: KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON •

    $default  reduce using rule 103 (if_statement)


State 285

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 289


State 286

   11 variable_declaration: • identifier DEL_COLON types DEL_SMCOLON
   18 identifier: • identifier_expr
   19           | • TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   20           | • identifier DEL_COMMA TK_IDENTIFIER
   21           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   22           | • identifier DEL_COMMA TK_IDENTIFIER DEL_LBRACKET DEL_RBRACKET
   36 const: • KW_CONST identifier AOP_ASSIGN expr DEL_COLON basic_data_type DEL_SMCOLON
   56 identifier_expr: • TK_IDENTIFIER
   57                | • HASH TK_IDENTIFIER
   58                | • TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   59                | • HASH TK_IDENTIFIER DEL_LBRACKET expr DEL_RBRACKET
   60                | • identifier_expr DEL_DOT HASH TK_IDENTIFIER
   61                | • identifier_expr DEL_DOT TK_IDENTIFIER
   82 statements: • if_statement
   83           | • while_statement
   84           | • assign_statement
   85           | • for_statement
   86           | • array_int_comprehension
   87           | • array_comprehension
   88           | • return_statement
   89           | • break_statement
   90           | • continue_statement
   91           | • function_statement DEL_SMCOLON
   92 statement_body: ε •  [KW_ENDFOR]
   93               | • variable_declaration statement_body
   94               | • const statement_body
   95               | • statements statement_body
   96 assign_statement: • identifier_expr AOP_ASSIGN expr DEL_SMCOLON
   97                 | • identifier_expr AOP_PLUSASSIGN expr DEL_SMCOLON
   98                 | • identifier_expr AOP_MINASSIGN expr DEL_SMCOLON
   99                 | • identifier_expr AOP_MULASSIGN expr DEL_SMCOLON
  100                 | • identifier_expr AOP_DIVASSIGN expr DEL_SMCOLON
  101                 | • identifier_expr AOP_MODASSIGN expr DEL_SMCOLON
  102 if_statement: • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  103             | • KW_IF DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ELSE DEL_COLON statement_body KW_ENDIF DEL_SMCOLON
  104 while_statement: • KW_WHILE DEL_LPAR expr DEL_RPAR DEL_COLON statement_body KW_ENDWHILE DEL_SMCOLON
  105 for_statement: • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | • KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON
  106              | KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON • statement_body KW_ENDFOR DEL_SMCOLON
  107 array_int_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  108 array_comprehension: • TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON
  109 break_statement: • KW_BREAK DEL_SMCOLON
  110 continue_statement: • KW_CONTINUE DEL_SMCOLON
  111 return_statement: • KW_RETURN DEL_SMCOLON
  112                 | • KW_RETURN expr DEL_SMCOLON
  113 function_statement: • TK_IDENTIFIER DEL_LPAR DEL_RPAR
  114                   | • TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR
  115                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR DEL_RPAR
  116                   | • identifier_expr DEL_DOT TK_IDENTIFIER DEL_LPAR function_arguments DEL_RPAR

    TK_IDENTIFIER  shift, and go to state 137
    KW_CONST       shift, and go to state 2
    KW_IF          shift, and go to state 138
    KW_FOR         shift, and go to state 139
    KW_WHILE       shift, and go to state 140
    KW_BREAK       shift, and go to state 141
    KW_CONTINUE    shift, and go to state 142
    KW_RETURN      shift, and go to state 143
    HASH           shift, and go to state 5

    $default  reduce using rule 92 (statement_body)

    variable_declaration     go to state 245
    identifier               go to state 11
    const                    go to state 246
    identifier_expr          go to state 146
    statements               go to state 247
    statement_body           go to state 290
    assign_statement         go to state 149
    if_statement             go to state 150
    while_statement          go to state 151
    for_statement            go to state 152
    array_int_comprehension  go to state 153
    array_comprehension      go to state 154
    break_statement          go to state 155
    continue_statement       go to state 156
    return_statement         go to state 157
    function_statement       go to state 158


State 287

  107 array_int_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 107 (array_int_comprehension)


State 288

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER • DEL_RBRACKET DEL_COLON types DEL_SMCOLON

    DEL_RBRACKET  shift, and go to state 291


State 289

  105 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 105 (for_statement)


State 290

  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body • KW_ENDFOR DEL_SMCOLON

    KW_ENDFOR  shift, and go to state 292


State 291

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET • DEL_COLON types DEL_SMCOLON

    DEL_COLON  shift, and go to state 293


State 292

  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 294


State 293

   12 basic_data_type: • KW_INT
   13                | • KW_SCALAR
   14                | • KW_STR
   15                | • KW_BOOLEAN
   16 types: • basic_data_type
   17      | • TK_IDENTIFIER
  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON • types DEL_SMCOLON

    TK_IDENTIFIER  shift, and go to state 51
    KW_INT         shift, and go to state 52
    KW_SCALAR      shift, and go to state 53
    KW_STR         shift, and go to state 54
    KW_BOOLEAN     shift, and go to state 55

    basic_data_type  go to state 56
    types            go to state 295


State 294

  106 for_statement: KW_FOR TK_IDENTIFIER KW_IN DEL_LBRACKET expr DEL_COLON expr DEL_COLON expr DEL_RBRACKET DEL_COLON statement_body KW_ENDFOR DEL_SMCOLON •

    $default  reduce using rule 106 (for_statement)


State 295

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types • DEL_SMCOLON

    DEL_SMCOLON  shift, and go to state 296


State 296

  108 array_comprehension: TK_IDENTIFIER AOP_COLONASSIGN DEL_LBRACKET expr KW_FOR TK_IDENTIFIER DEL_COLON types KW_IN TK_IDENTIFIER KW_OF TK_INTEGER DEL_RBRACKET DEL_COLON types DEL_SMCOLON •

    $default  reduce using rule 108 (array_comprehension)
